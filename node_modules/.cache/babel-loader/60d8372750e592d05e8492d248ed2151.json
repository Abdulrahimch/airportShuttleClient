{"ast":null,"code":"var _jsxFileName = \"/home/cisco/airport-shuttle-v2/airportShuttleV2/client/src/pages/ClientReservations/ListReservations.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport useStyles from './useStyles';\nimport { format } from 'date-fns';\nimport { Box, Tab } from '@material-ui/core';\nimport DataTable from '../../components/DataTable/DataTable';\nimport { engColumn, turksihColumns } from '../../utils/dictionary';\nimport { getReservations } from '../../helpers/APICalls/reservation';\nimport { deleteReservation } from '../../helpers/APICalls/reservation';\nimport { useSnackBar } from '../../context/useSnackbarContext';\nimport { useHistory } from 'react-router-dom';\nimport { useLanguage } from '../../context/useLanguageContext';\nimport TabContext from '@material-ui/lab/TabContext';\nimport TabList from '@material-ui/lab/TabList';\nimport TabPanel from '@material-ui/lab/TabPanel';\nimport { turkishTabs, engTabs } from '../../utils/dictionary';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ListReservations() {\n  _s();\n\n  const {\n    root\n  } = useStyles();\n  const history = useHistory();\n  const {\n    language\n  } = useLanguage();\n  const {\n    updateSnackBarMessage\n  } = useSnackBar();\n  const [confirmedReservations, setConfirmedReservations] = useState([]);\n  const [unConfirmedReservations, setUnConfirmedReservations] = useState([]);\n  const [open, setOpen] = useState(false);\n  const [value, setValue] = useState('1');\n  const [initValues, setInitValues] = useState({\n    type: 0,\n    from: 0,\n    to: 0,\n    property: '',\n    pax: 5,\n    flightNo: '',\n    driverNote: '',\n    selectedDate: new Date(),\n    timezone: 0,\n    passengers: []\n  });\n\n  const handleDialogClose = () => {\n    setOpen(false);\n  };\n\n  const handleCacelClick = cellValues => {\n    const id = cellValues.row._id;\n    deleteReservation(id).then(data => {\n      if (data.error) {\n        updateSnackBarMessage(data.error.message);\n      } else if (data.success) {\n        updateSnackBarMessage('reservation deleted!');\n        setConfirmedReservations(confirmedReservations.filter(row => row.id !== cellValues.id));\n      } else {\n        updateSnackBarMessage('An unexpected error occurred. Please try again !');\n      }\n    });\n  };\n\n  const handleEditClick = cellValues => {\n    setInitValues(cellValues.row);\n    setOpen(true);\n  };\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const columns = language === 'tr' ? turksihColumns(handleEditClick, handleCacelClick) : engColumn(handleEditClick, handleCacelClick);\n  const tabs = language === 'tr' ? turkishTabs : engTabs;\n  useEffect(() => {\n    getReservations().then(data => {\n      if (data.error) {\n        console.log(data.error);\n      } else if (data.success) {\n        data.success.reservations.confirmedReservations.map((reservation, idx) => {\n          reservation.id = idx + 1;\n          const date = new Date(reservation.selectedDate);\n          reservation.date = format(date, \"dd-MM-yyyy kk:mm\");\n        });\n        setConfirmedReservations(data.success.reservations.confirmedReservations);\n      } else {\n        console.log('External error');\n      }\n    });\n    return () => {\n      setConfirmedReservations([]);\n    };\n  }, [history, open]);\n  return (\n    /*#__PURE__*/\n    // <>\n    // <Box className={root}>\n    //     <DataTable rows={rows} columns={columns} />\n    //     <CustomDialog \n    //         open={open} \n    //         onClose={handleDialogClose}\n    //         // eslint-disable-next-line react/style-prop-object\n    //         style={'updateReservation'}\n    //     >\n    //         <UpdateReservation initValues={initValues} setOpen={setOpen} />\n    //     </CustomDialog>\n    // </Box>\n    // </>\n    _jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          width: '100%'\n        },\n        className: root,\n        children: /*#__PURE__*/_jsxDEV(TabContext, {\n          value: value,\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              borderBottom: 1,\n              borderColor: 'divider'\n            },\n            children: /*#__PURE__*/_jsxDEV(TabList, {\n              onChange: handleChange,\n              \"aria-label\": \"lab API tabs example\",\n              children: tabs.map((_ref, idx) => {\n                let {\n                  label,\n                  value\n                } = _ref;\n                return /*#__PURE__*/_jsxDEV(Tab, {\n                  label: label,\n                  value: value\n                }, idx, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 114,\n                  columnNumber: 33\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n            value: \"1\",\n            style: {\n              width: '100%'\n            },\n            children: /*#__PURE__*/_jsxDEV(DataTable, {\n              rows: confirmedReservations,\n              columns: columns\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 67\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n            value: \"2\",\n            style: {\n              width: '100%'\n            },\n            children: /*#__PURE__*/_jsxDEV(DataTable, {\n              rows: unConfirmedReservations,\n              columns: columns\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 67\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }, this)\n    }, void 0, false)\n  );\n}\n\n_s(ListReservations, \"CYFQ5NIfkNwX54C5aFmtOvz1ESk=\", false, function () {\n  return [useStyles, useHistory, useLanguage, useSnackBar];\n});\n\n_c = ListReservations;\nexport default ListReservations;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListReservations\");","map":{"version":3,"sources":["/home/cisco/airport-shuttle-v2/airportShuttleV2/client/src/pages/ClientReservations/ListReservations.tsx"],"names":["useEffect","useState","useStyles","format","Box","Tab","DataTable","engColumn","turksihColumns","getReservations","deleteReservation","useSnackBar","useHistory","useLanguage","TabContext","TabList","TabPanel","turkishTabs","engTabs","ListReservations","root","history","language","updateSnackBarMessage","confirmedReservations","setConfirmedReservations","unConfirmedReservations","setUnConfirmedReservations","open","setOpen","value","setValue","initValues","setInitValues","type","from","to","property","pax","flightNo","driverNote","selectedDate","Date","timezone","passengers","handleDialogClose","handleCacelClick","cellValues","id","row","_id","then","data","error","message","success","filter","handleEditClick","handleChange","event","newValue","columns","tabs","console","log","reservations","map","reservation","idx","date","width","borderBottom","borderColor","label"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport useStyles from './useStyles';\nimport { format } from 'date-fns';\nimport { Box, Tab } from '@material-ui/core';\nimport DataTable from '../../components/DataTable/DataTable';\nimport { engColumn, turksihColumns } from '../../utils/dictionary';\nimport { getReservations } from '../../helpers/APICalls/reservation';\nimport { deleteReservation } from '../../helpers/APICalls/reservation';\nimport { useSnackBar } from '../../context/useSnackbarContext';\nimport CustomDialog from '../../components/CustomDialog/CustomDialog';\nimport UpdateReservation from './UpdateReservation/UpdateReservation';\nimport { useHistory } from 'react-router-dom';\nimport { useLanguage } from '../../context/useLanguageContext';\nimport TabContext from '@material-ui/lab/TabContext';\nimport TabList from '@material-ui/lab/TabList';\nimport TabPanel from '@material-ui/lab/TabPanel';\nimport { turkishTabs, engTabs } from '../../utils/dictionary';\n\nfunction ListReservations(): JSX.Element{\n    const { root } = useStyles();\n    const history = useHistory();\n    const { language } = useLanguage();\n    const { updateSnackBarMessage } = useSnackBar();\n\n    const [confirmedReservations, setConfirmedReservations] = useState<any>([]);\n    const [unConfirmedReservations, setUnConfirmedReservations] = useState<any>([]);\n    const [open, setOpen] = useState<boolean>(false);\n    const [value, setValue] = useState('1');\n    const [initValues, setInitValues] = useState( {\n        type: 0,\n        from: 0,\n        to: 0,\n        property: '',\n        pax: 5,\n        flightNo: '',\n        driverNote: '',\n        selectedDate: new Date(),\n        timezone: 0,\n        passengers: []\n        });\n\n    const handleDialogClose = () => {\n        setOpen(false)\n    };\n\n    const handleCacelClick = (cellValues: any) => {\n        const id = cellValues.row._id;\n        deleteReservation(id).then((data) => {\n            if (data.error) {\n                updateSnackBarMessage(data.error.message);\n            } else if (data.success) {\n                updateSnackBarMessage('reservation deleted!');\n                setConfirmedReservations(confirmedReservations.filter((row: any) => row.id !== cellValues.id));\n            } else {\n                updateSnackBarMessage('An unexpected error occurred. Please try again !');\n            }\n        })\n        \n    };\n    const handleEditClick = (cellValues: any) => {\n        setInitValues(cellValues.row)\n        setOpen(true)\n    };\n\n    const handleChange = (event:  any, newValue: string) => {\n        setValue(newValue);\n    };\n\n    const columns = language === 'tr' ? turksihColumns(handleEditClick, handleCacelClick): engColumn(handleEditClick, handleCacelClick);\n    const tabs = language === 'tr' ? turkishTabs : engTabs\n\n    useEffect(() => {\n        getReservations().then((data) => {\n            if (data.error){\n                console.log(data.error)\n            } else if (data.success) {\n                data.success.reservations.confirmedReservations.map((reservation, idx) => {\n                    reservation.id = idx + 1;\n                    const date = new Date(reservation.selectedDate)\n                    reservation.date = format(date, \"dd-MM-yyyy kk:mm\")\n                });\n                setConfirmedReservations(data.success.reservations.confirmedReservations);\n            } else {\n                console.log('External error')\n            }\n        })\n        return () => {\n            setConfirmedReservations([]);\n        }\n    }, [history, open]);\n\n    \n    \n    return (\n        // <>\n        // <Box className={root}>\n        //     <DataTable rows={rows} columns={columns} />\n        //     <CustomDialog \n        //         open={open} \n        //         onClose={handleDialogClose}\n        //         // eslint-disable-next-line react/style-prop-object\n        //         style={'updateReservation'}\n        //     >\n        //         <UpdateReservation initValues={initValues} setOpen={setOpen} />\n        //     </CustomDialog>\n        // </Box>\n        // </>\n        <>\n            <Box sx={{ width: '100%' }} className={root}>\n                <TabContext value={value}>\n                    <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n                        <TabList onChange={handleChange} aria-label=\"lab API tabs example\">\n                            {tabs.map(({label, value}, idx) => (\n                                <Tab key={idx} label={label} value={value} />\n                            ))}\n                        </TabList>\n                    </Box>\n                    <TabPanel value=\"1\" style={{ width: '100%' }}><DataTable rows={confirmedReservations} columns={columns} /></TabPanel>\n                    <TabPanel value=\"2\" style={{ width: '100%' }}><DataTable rows={unConfirmedReservations} columns={columns} /></TabPanel>\n                </TabContext>\n            </Box>\n        </>\n    )\n}\n\nexport default ListReservations;"]},"metadata":{},"sourceType":"module"}