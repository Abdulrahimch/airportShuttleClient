{"ast":null,"code":"import axios from 'axios';\nexport const updateReservation = (inputs, id) => {\n  return axios.patch(`https://airport-shuttle-server.herokuapp.com/agency-reservation/${id}`, inputs).then(res => res.data).catch(error => error.response.data);\n};\nexport const deleteReservation = async id => {\n  return await axios.delete(`https://airport-shuttle-server.herokuapp.com/reservation/${id}`).then(res => res.data).catch(error => error.response.data);\n};\nexport const getClientReservation = async id => {\n  return await axios.get(`https://airport-shuttle-server.herokuapp.com/agency-reservation/${id}`).then(res => res.data).catch(error => error.response.data);\n};\nexport const getClientReservationPaymentStat = async (id, from, to) => {\n  return await axios.get(`https://airport-shuttle-server.herokuapp.com/agency-reservation/stat/${id}`, {\n    params: {\n      from,\n      to\n    }\n  }).then(res => res.data).catch(error => error.response.data);\n};\nexport const getReservations = async (from, to) => {\n  return await axios.get(`https://airport-shuttle-server.herokuapp.com/agency-reservation`, {\n    params: {\n      from: from,\n      to: to\n    }\n  }).then(res => res.data).catch(error => error.response.data);\n};\nexport const getStat = async () => {\n  return await axios.get(`https://airport-shuttle-server.herokuapp.com/agency-reservation/stat/`, {\n    withCredentials: true\n  }).then(res => res.data).catch(error => error.response.data);\n};\nexport const getstatInfo = async () => {\n  return await axios.get(`https://airport-shuttle-server.herokuapp.com/agency-reservation/statinfo/`).then(res => res.data).catch(error => error.response.data);\n};","map":{"version":3,"sources":["/home/cisco/airportShuttleDeploy/airportShuttleV2/client/src/helpers/APICalls/agencyReservation.ts"],"names":["axios","updateReservation","inputs","id","patch","then","res","data","catch","error","response","deleteReservation","delete","getClientReservation","get","getClientReservationPaymentStat","from","to","params","getReservations","getStat","withCredentials","getstatInfo"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAYA,OAAO,MAAMC,iBAAiB,GAAG,CAACC,MAAD,EAAiBC,EAAjB,KAAgE;AAC7F,SAAOH,KAAK,CAACI,KAAN,CAAa,mEAAkED,EAAG,EAAlF,EAAqFD,MAArF,EACEG,IADF,CACQC,GAAD,IAASA,GAAG,CAACC,IADpB,EAEEC,KAFF,CAEQC,KAAK,IAAIA,KAAK,CAACC,QAAN,CAAeH,IAFhC,CAAP;AAGH,CAJM;AAMP,OAAO,MAAMI,iBAAiB,GAAG,MAAOR,EAAP,IAAsD;AACnF,SAAO,MAAMH,KAAK,CAACY,MAAN,CAAc,4DAA2DT,EAAG,EAA5E,EACIE,IADJ,CACUC,GAAD,IAASA,GAAG,CAACC,IADtB,EAEIC,KAFJ,CAEUC,KAAK,IAAIA,KAAK,CAACC,QAAN,CAAeH,IAFlC,CAAb;AAGH,CAJM;AAMP,OAAO,MAAMM,oBAAoB,GAAG,MAAOV,EAAP,IAAsD;AACtF,SAAO,MAAMH,KAAK,CAACc,GAAN,CAAW,mEAAkEX,EAAG,EAAhF,EACIE,IADJ,CACUC,GAAD,IAASA,GAAG,CAACC,IADtB,EAEIC,KAFJ,CAEWC,KAAD,IAAWA,KAAK,CAACC,QAAN,CAAeH,IAFpC,CAAb;AAGH,CAJM;AAMP,OAAO,MAAMQ,+BAA+B,GAAG,OAAOZ,EAAP,EAAmBa,IAAnB,EAA+BC,EAA/B,KAAmF;AAC9H,SAAO,MAAMjB,KAAK,CAACc,GAAN,CAAW,wEAAuEX,EAAG,EAArF,EAAwF;AACjGe,IAAAA,MAAM,EAAE;AACJF,MAAAA,IADI;AAEJC,MAAAA;AAFI;AADyF,GAAxF,EAMZZ,IANY,CAMNC,GAAD,IAASA,GAAG,CAACC,IANN,EAOZC,KAPY,CAOLC,KAAD,IAAWA,KAAK,CAACC,QAAN,CAAeH,IAPpB,CAAb;AAQH,CATM;AAWP,OAAO,MAAMY,eAAe,GAAG,OAAOH,IAAP,EAAmBC,EAAnB,KAAgE;AAC3F,SAAO,MAAMjB,KAAK,CAACc,GAAN,CAAW,iEAAX,EAA6E;AACtFI,IAAAA,MAAM,EAAE;AACJF,MAAAA,IAAI,EAAEA,IADF;AAEJC,MAAAA,EAAE,EAAEA;AAFA;AAD8E,GAA7E,EAMZZ,IANY,CAMNC,GAAD,IAASA,GAAG,CAACC,IANN,EAOZC,KAPY,CAOLC,KAAD,IAAWA,KAAK,CAACC,QAAN,CAAeH,IAPpB,CAAb;AAQH,CATM;AAWP,OAAO,MAAMa,OAAO,GAAG,YAAqC;AACxD,SAAO,MAAMpB,KAAK,CAACc,GAAN,CAAW,uEAAX,EAAmF;AAAEO,IAAAA,eAAe,EAAE;AAAnB,GAAnF,EACZhB,IADY,CACNC,GAAD,IAASA,GAAG,CAACC,IADN,EAEZC,KAFY,CAELC,KAAD,IAAWA,KAAK,CAACC,QAAN,CAAeH,IAFpB,CAAb;AAGH,CAJM;AAMP,OAAO,MAAMe,WAAW,GAAG,YAAyC;AAChE,SAAO,MAAMtB,KAAK,CAACc,GAAN,CAAW,2EAAX,EACZT,IADY,CACNC,GAAD,IAASA,GAAG,CAACC,IADN,EAEZC,KAFY,CAELC,KAAD,IAAWA,KAAK,CAACC,QAAN,CAAeH,IAFpB,CAAb;AAGH,CAJM","sourcesContent":["import axios from 'axios';\nimport { GetReservationApiData, \n        GetReservationPaymentApiData, \n        GetStatApiData,\n        GetStatInfoApiData } from '../../interface/agencyReservation';\n\ninterface Inputs {\n    status?: string;\n    confirmed?: boolean;\n    driver?: string\n}\n\nexport const updateReservation = (inputs: Inputs, id: string): Promise<GetReservationApiData> => {\n    return axios.patch(`https://airport-shuttle-server.herokuapp.com/agency-reservation/${id}`, inputs)\n            .then((res) => res.data)\n            .catch(error => error.response.data);\n};\n\nexport const deleteReservation = async (id: string): Promise<GetReservationApiData> => {\n    return await axios.delete(`https://airport-shuttle-server.herokuapp.com/reservation/${id}`)\n                    .then((res) => res.data)\n                    .catch(error => error.response.data);\n};\n\nexport const getClientReservation = async (id: string): Promise<GetReservationApiData> => {\n    return await axios.get(`https://airport-shuttle-server.herokuapp.com/agency-reservation/${id}`)\n                    .then((res) => res.data)\n                    .catch((error) => error.response.data);\n};\n\nexport const getClientReservationPaymentStat = async (id: string, from: Date, to: Date): Promise<GetReservationPaymentApiData> => {\n    return await axios.get(`https://airport-shuttle-server.herokuapp.com/agency-reservation/stat/${id}`, {\n        params: {\n            from,\n            to\n        }\n    })\n    .then((res) => res.data)\n    .catch((error) => error.response.data);\n};\n\nexport const getReservations = async (from: Date, to: Date): Promise<GetReservationApiData> => {\n    return await axios.get(`https://airport-shuttle-server.herokuapp.com/agency-reservation`, {\n        params: {\n            from: from,\n            to: to\n        }\n    })\n    .then((res) => res.data)\n    .catch((error) => error.response.data);\n};\n\nexport const getStat = async (): Promise<GetStatApiData> => {\n    return await axios.get(`https://airport-shuttle-server.herokuapp.com/agency-reservation/stat/`, { withCredentials: true })\n    .then((res) => res.data)\n    .catch((error) => error.response.data);\n};\n\nexport const getstatInfo = async (): Promise<GetStatInfoApiData> => {\n    return await axios.get(`https://airport-shuttle-server.herokuapp.com/agency-reservation/statinfo/`)\n    .then((res) => res.data)\n    .catch((error) => error.response.data);\n};"]},"metadata":{},"sourceType":"module"}