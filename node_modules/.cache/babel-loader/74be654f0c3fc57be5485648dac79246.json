{"ast":null,"code":"var _jsxFileName = \"/home/cisco/airport-shuttle-v2/airportShuttleV2/client/src/pages/Agency/ListClients/ListClients.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport DataTable from \"../../../components/DataTable/DataTable\";\nimport { turkishClientColumn, engClientColumn } from '../../../utils/dictionary';\nimport { useLanguage } from '../../../context/useLanguageContext';\nimport { useSnackBar } from '../../../context/useSnackbarContext';\nimport { deleteClient, getClients } from '../../../helpers/APICalls/user';\nimport { format } from 'date-fns';\nimport { useHistory } from 'react-router-dom';\nimport CustomDialog from '../../../components/CustomDialog/CustomDialog';\nimport { Box, Typography } from '@material-ui/core';\nimport CustomButton from '../../../components/Button/CustomButton';\nimport useStyles from './useStyles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ListClients = () => {\n  _s();\n\n  const {\n    mainBox,\n    title\n  } = useStyles();\n  const {\n    language\n  } = useLanguage();\n  const [rows, setRows] = useState([]);\n  const [openDialog, setOpenDialog] = useState(false);\n  const [cellValue, setCellValue] = useState();\n  const {\n    updateSnackBarMessage\n  } = useSnackBar();\n  const history = useHistory();\n  useEffect(() => {\n    getClients().then(data => {\n      if (data.error) {\n        console.log(data.error);\n        updateSnackBarMessage(data.error.message);\n      } else if (data.success) {\n        data.success.clients.map((client, idx) => {\n          client.id = idx + 1;\n          const date = new Date(client.createdAt ? client.createdAt : Date.now());\n          client.createdAt = format(date, 'dd-MM-yyyy kk:mm');\n        });\n        setRows(data.success.clients);\n      } else {\n        updateSnackBarMessage('An unexpected error occurred. Please try again !');\n      }\n    });\n  }, [history]);\n\n  const handleEditClick = () => {\n    console.log('edit is hitted');\n  };\n\n  const handleCancelClick = values => {\n    setOpenDialog(true);\n    setCellValue(values.row);\n  };\n\n  const onYesClick = () => {\n    const id = cellValue._id;\n    deleteClient(id).then(data => {\n      if (data.error) {\n        updateSnackBarMessage(data.error.message);\n      } else if (data.success) {\n        updateSnackBarMessage('Client has been deleted successfully!');\n        setRows(rows.filter(row => row.id !== values.id));\n      } else {\n        updateSnackBarMessage('An unexpected error occurred. Please try again !');\n      }\n    });\n  };\n\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n  };\n\n  const dialog = language === 'tr' ? {\n    text: 'Bu müşteriyi silmek istediğinizden emin misiniz?',\n    yes: 'Evet',\n    no: 'Hayır '\n  } : {\n    text: 'Are you sure you want to delete this client?',\n    yes: 'Yes',\n    no: 'No '\n  };\n  const columns = language === 'tr' ? turkishClientColumn(handleEditClick, handleCancelClick) : engClientColumn(handleEditClick, handleCancelClick);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(DataTable, {\n      rows: rows,\n      columns: columns\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CustomDialog, {\n      open: openDialog,\n      onClose: handleCloseDialog,\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          display: \"flex\",\n          alignItems: \"center\",\n          flexDirection: \"column\",\n          className: mainBox,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            className: title,\n            children: dialog.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            justifyContent: \"center\",\n            m: 2,\n            pt: 3,\n            children: [/*#__PURE__*/_jsxDEV(CustomButton, {\n              btnText: dialog.yes,\n              style: \"yes\",\n              onClick: onYesClick\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CustomButton, {\n              btnText: dialog.no,\n              style: \"no\",\n              onClick: handleCloseDialog\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this)\n      }, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ListClients, \"BW4j2SGHmAxhQ78BARn6nKOWELY=\", false, function () {\n  return [useStyles, useLanguage, useSnackBar, useHistory];\n});\n\n_c = ListClients;\nexport default ListClients;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListClients\");","map":{"version":3,"sources":["/home/cisco/airport-shuttle-v2/airportShuttleV2/client/src/pages/Agency/ListClients/ListClients.tsx"],"names":["useState","useEffect","DataTable","turkishClientColumn","engClientColumn","useLanguage","useSnackBar","deleteClient","getClients","format","useHistory","CustomDialog","Box","Typography","CustomButton","useStyles","ListClients","mainBox","title","language","rows","setRows","openDialog","setOpenDialog","cellValue","setCellValue","updateSnackBarMessage","history","then","data","error","console","log","message","success","clients","map","client","idx","id","date","Date","createdAt","now","handleEditClick","handleCancelClick","values","row","onYesClick","_id","filter","handleCloseDialog","dialog","text","yes","no","columns"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,yCAAtB;AACA,SAASC,mBAAT,EAA8BC,eAA9B,QAAqD,2BAArD;AACA,SAASC,WAAT,QAA4B,qCAA5B;AACA,SAASC,WAAT,QAA4B,qCAA5B;AACA,SAASC,YAAT,EAAuBC,UAAvB,QAAyC,gCAAzC;AACA,SAASC,MAAT,QAAuB,UAAvB;AAEA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,+CAAzB;AACA,SAASC,GAAT,EAAcC,UAAd,QAAgC,mBAAhC;AACA,OAAOC,YAAP,MAAyB,yCAAzB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;;;AAEA,MAAMC,WAAW,GAAG,MAAmB;AAAA;;AACnC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAqBH,SAAS,EAApC;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAed,WAAW,EAAhC;AACA,QAAM,CAACe,IAAD,EAAOC,OAAP,IAAkBrB,QAAQ,CAAY,EAAZ,CAAhC;AACA,QAAM,CAACsB,UAAD,EAAaC,aAAb,IAA8BvB,QAAQ,CAAU,KAAV,CAA5C;AACA,QAAM,CAACwB,SAAD,EAAYC,YAAZ,IAA4BzB,QAAQ,EAA1C;AAEA,QAAM;AAAE0B,IAAAA;AAAF,MAA4BpB,WAAW,EAA7C;AACA,QAAMqB,OAAO,GAAGjB,UAAU,EAA1B;AAEAT,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,UAAU,GAAGoB,IAAb,CAAmBC,IAAD,IAAU;AACxB,UAAIA,IAAI,CAACC,KAAT,EAAgB;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACC,KAAjB;AACAJ,QAAAA,qBAAqB,CAACG,IAAI,CAACC,KAAL,CAAWG,OAAZ,CAArB;AACH,OAHD,MAGO,IAAIJ,IAAI,CAACK,OAAT,EAAiB;AACpBL,QAAAA,IAAI,CAACK,OAAL,CAAaC,OAAb,CAAqBC,GAArB,CAAyB,CAACC,MAAD,EAASC,GAAT,KAAiB;AACtCD,UAAAA,MAAM,CAACE,EAAP,GAAYD,GAAG,GAAG,CAAlB;AACA,gBAAME,IAAI,GAAG,IAAIC,IAAJ,CAASJ,MAAM,CAACK,SAAP,GAAmBL,MAAM,CAACK,SAA1B,GAAsCD,IAAI,CAACE,GAAL,EAA/C,CAAb;AACAN,UAAAA,MAAM,CAACK,SAAP,GAAmBjC,MAAM,CAAC+B,IAAD,EAAO,kBAAP,CAAzB;AACH,SAJD;AAKAnB,QAAAA,OAAO,CAACQ,IAAI,CAACK,OAAL,CAAaC,OAAd,CAAP;AACH,OAPM,MAOA;AACHT,QAAAA,qBAAqB,CAAC,kDAAD,CAArB;AACH;AACJ,KAdD;AAeH,GAhBQ,EAgBN,CAACC,OAAD,CAhBM,CAAT;;AAkBA,QAAMiB,eAAe,GAAG,MAAM;AAC1Bb,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACH,GAFD;;AAIA,QAAMa,iBAAiB,GAAIC,MAAD,IAAiB;AACvCvB,IAAAA,aAAa,CAAC,IAAD,CAAb;AACAE,IAAAA,YAAY,CAACqB,MAAM,CAACC,GAAR,CAAZ;AACH,GAHD;;AAKA,QAAMC,UAAU,GAAG,MAAM;AACrB,UAAMT,EAAE,GAAGf,SAAS,CAACyB,GAArB;AACA1C,IAAAA,YAAY,CAACgC,EAAD,CAAZ,CAAiBX,IAAjB,CAAuBC,IAAD,IAAU;AAC5B,UAAIA,IAAI,CAACC,KAAT,EAAgB;AACZJ,QAAAA,qBAAqB,CAACG,IAAI,CAACC,KAAL,CAAWG,OAAZ,CAArB;AACH,OAFD,MAEO,IAAIJ,IAAI,CAACK,OAAT,EAAkB;AACrBR,QAAAA,qBAAqB,CAAC,uCAAD,CAArB;AACAL,QAAAA,OAAO,CAACD,IAAI,CAAC8B,MAAL,CAAYH,GAAG,IAAIA,GAAG,CAACR,EAAJ,KAAWO,MAAM,CAACP,EAArC,CAAD,CAAP;AACH,OAHM,MAGA;AACHb,QAAAA,qBAAqB,CAAC,kDAAD,CAArB;AACH;AACJ,KATD;AAUH,GAZD;;AAcA,QAAMyB,iBAAiB,GAAG,MAAM;AAC5B5B,IAAAA,aAAa,CAAC,KAAD,CAAb;AACH,GAFD;;AAIA,QAAM6B,MAAM,GAAGjC,QAAQ,KAAK,IAAb,GAAoB;AACKkC,IAAAA,IAAI,EAAE,kDADX;AAEKC,IAAAA,GAAG,EAAE,MAFV;AAGKC,IAAAA,EAAE,EAAE;AAHT,GAApB,GAKqB;AACIF,IAAAA,IAAI,EAAE,8CADV;AAEIC,IAAAA,GAAG,EAAE,KAFT;AAGIC,IAAAA,EAAE,EAAE;AAHR,GALpC;AAWA,QAAMC,OAAO,GAAGrC,QAAQ,KAAK,IAAb,GAAoBhB,mBAAmB,CAACyC,eAAD,EAAkBC,iBAAlB,CAAvC,GACsBzC,eAAe,CAACwC,eAAD,EAAkBC,iBAAlB,CADrD;AAGA,sBACI;AAAA,4BACI,QAAC,SAAD;AAAW,MAAA,IAAI,EAAEzB,IAAjB;AAAuB,MAAA,OAAO,EAAEoC;AAAhC;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,YAAD;AAAc,MAAA,IAAI,EAAElC,UAApB;AAAgC,MAAA,OAAO,EAAE6B,iBAAzC;AAAA,6BACI;AAAA,+BACI,QAAC,GAAD;AAAK,UAAA,OAAO,EAAC,MAAb;AAAoB,UAAA,UAAU,EAAC,QAA/B;AAAwC,UAAA,aAAa,EAAC,QAAtD;AAA+D,UAAA,SAAS,EAAElC,OAA1E;AAAA,kCACQ,QAAC,UAAD;AAAY,YAAA,SAAS,EAAEC,KAAvB;AAAA,sBACKkC,MAAM,CAACC;AADZ;AAAA;AAAA;AAAA;AAAA,kBADR,eAIQ,QAAC,GAAD;AAAK,YAAA,cAAc,EAAC,QAApB;AAA6B,YAAA,CAAC,EAAE,CAAhC;AAAmC,YAAA,EAAE,EAAE,CAAvC;AAAA,oCACI,QAAC,YAAD;AAAc,cAAA,OAAO,EAAED,MAAM,CAACE,GAA9B;AAAmC,cAAA,KAAK,EAAC,KAAzC;AAA+C,cAAA,OAAO,EAAEN;AAAxD;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI,QAAC,YAAD;AAAc,cAAA,OAAO,EAAEI,MAAM,CAACG,EAA9B;AAAkC,cAAA,KAAK,EAAC,IAAxC;AAA6C,cAAA,OAAO,EAAEJ;AAAtD;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AADJ;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA,kBADJ;AAkBH,CAvFD;;GAAMnC,W;UACyBD,S,EACNV,W,EAKaC,W,EAClBI,U;;;KARdM,W;AAyFN,eAAeA,WAAf","sourcesContent":["import { useState, useEffect } from 'react';\nimport DataTable from \"../../../components/DataTable/DataTable\";\nimport { turkishClientColumn, engClientColumn } from '../../../utils/dictionary';\nimport { useLanguage } from '../../../context/useLanguageContext';\nimport { useSnackBar } from '../../../context/useSnackbarContext';\nimport { deleteClient, getClients } from '../../../helpers/APICalls/user';\nimport { format } from 'date-fns';\nimport { Client } from '../../../interface/Client';\nimport { useHistory } from 'react-router-dom';\nimport CustomDialog from '../../../components/CustomDialog/CustomDialog';\nimport { Box, Typography } from '@material-ui/core';\nimport CustomButton from '../../../components/Button/CustomButton';\nimport useStyles from './useStyles';\n\nconst ListClients = (): JSX.Element => {\n    const { mainBox, title } = useStyles();\n    const { language } = useLanguage();\n    const [rows, setRows] = useState<Client []>([]);\n    const [openDialog, setOpenDialog] = useState<boolean>(false);\n    const [cellValue, setCellValue] = useState<Client>()\n\n    const { updateSnackBarMessage } = useSnackBar();\n    const history = useHistory();\n\n    useEffect(() => {\n        getClients().then((data) => {\n            if (data.error) {\n                console.log(data.error);\n                updateSnackBarMessage(data.error.message);\n            } else if (data.success){\n                data.success.clients.map((client, idx) => {\n                    client.id = idx + 1;\n                    const date = new Date(client.createdAt ? client.createdAt : Date.now());\n                    client.createdAt = format(date, 'dd-MM-yyyy kk:mm')\n                });\n                setRows(data.success.clients);\n            } else {\n                updateSnackBarMessage('An unexpected error occurred. Please try again !');\n            }\n        });\n    }, [history])\n\n    const handleEditClick = () => {\n        console.log('edit is hitted');\n    };\n\n    const handleCancelClick = (values: any) => {\n        setOpenDialog(true);\n        setCellValue(values.row)\n    };\n\n    const onYesClick = () => {\n        const id = cellValue._id;\n        deleteClient(id).then((data) => {\n            if (data.error) {\n                updateSnackBarMessage(data.error.message);\n            } else if (data.success) {\n                updateSnackBarMessage('Client has been deleted successfully!');\n                setRows(rows.filter(row => row.id !== values.id));\n            } else {\n                updateSnackBarMessage('An unexpected error occurred. Please try again !');\n            }\n        });\n    }\n\n    const handleCloseDialog = () => {\n        setOpenDialog(false);\n    };\n\n    const dialog = language === 'tr' ? { \n                                            text: 'Bu müşteriyi silmek istediğinizden emin misiniz?',\n                                            yes: 'Evet',\n                                            no: 'Hayır ' \n                                        } : \n                                        {\n                                            text: 'Are you sure you want to delete this client?',\n                                            yes: 'Yes',\n                                            no: 'No '\n                                        }\n\n    const columns = language === 'tr' ? turkishClientColumn(handleEditClick, handleCancelClick) \n                                        : engClientColumn(handleEditClick, handleCancelClick);\n\n    return (\n        <>\n            <DataTable rows={rows} columns={columns} />\n            <CustomDialog open={openDialog} onClose={handleCloseDialog}>\n                <>\n                    <Box display='flex' alignItems='center' flexDirection=\"column\" className={mainBox}>\n                            <Typography className={title}>\n                                {dialog.text}\n                            </Typography>\n                            <Box justifyContent='center' m={2} pt={3}>\n                                <CustomButton btnText={dialog.yes} style='yes' onClick={onYesClick} />\n                                <CustomButton btnText={dialog.no} style='no' onClick={handleCloseDialog} />\n                            </Box>\n                    </Box>\n                </>\n            </CustomDialog>\n        </>\n    )\n};\n\nexport default ListClients;"]},"metadata":{},"sourceType":"module"}