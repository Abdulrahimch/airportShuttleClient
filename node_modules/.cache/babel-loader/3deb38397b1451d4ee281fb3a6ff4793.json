{"ast":null,"code":"import _slicedToArray from\"/home/cisco/airportShuttleDeploy/airportShuttleV2/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{Box,InputLabel,TextField,Typography}from\"@material-ui/core\";import{useState}from\"react\";import CustomButton from\"../../Button/CustomButton\";import useStyles from'./useStyles';import{changePasswordApi}from'../../../helpers/APICalls/login';import{useSnackBar}from\"../../../context/useSnackbarContext\";import{useLanguage}from\"../../../context/useLanguageContext\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ChangePassword=function ChangePassword(_ref){var handleDialogClose=_ref.handleDialogClose;var _useStyles=useStyles(),root=_useStyles.root,title=_useStyles.title,inputs=_useStyles.inputs,label=_useStyles.label;var _useState=useState(''),_useState2=_slicedToArray(_useState,2),oldPassword=_useState2[0],setOldPassword=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),newPassword=_useState4[0],setNewPassword=_useState4[1];var _useSnackBar=useSnackBar(),updateSnackBarMessage=_useSnackBar.updateSnackBarMessage;var _useLanguage=useLanguage(),language=_useLanguage.language;var changePassword=function changePassword(passwordType,event){switch(passwordType){case'oldPassword':setOldPassword(event.target.value);break;case'newPassword':setNewPassword(event.target.value);break;}};var handleSubmit=function handleSubmit(){var passwordInputs={oldPassword:oldPassword,newPassword:newPassword};changePasswordApi(passwordInputs).then(function(data){if(data.error){updateSnackBarMessage(data.error);}else if(data.success){updateSnackBarMessage('Password has been updated successfully');handleDialogClose();}else{updateSnackBarMessage('An unexpected error occurred. Please try again !');}});};return/*#__PURE__*/_jsxs(Box,{className:root,children:[/*#__PURE__*/_jsx(Typography,{className:title,children:language==='eng'?'Change Password':'Şifre Değiştir '}),/*#__PURE__*/_jsx(InputLabel,{children:language==='eng'?'Old Password':'Eski Şifre'}),/*#__PURE__*/_jsx(TextField,{type:\"password\",value:oldPassword,onChange:function onChange(event){changePassword('oldPassword',event);},InputProps:{classes:{input:inputs},disableUnderline:true}}),/*#__PURE__*/_jsx(InputLabel,{children:language==='eng'?'New Password':'Yeni Şifre'}),/*#__PURE__*/_jsx(TextField,{type:\"password\",value:newPassword,onChange:function onChange(event){changePassword('newPassword',event);},InputProps:{classes:{input:inputs},disableUnderline:true}}),/*#__PURE__*/_jsx(Box,{}),/*#__PURE__*/_jsx(CustomButton,{style:\"submit\",btnText:\"Submit\",onClick:handleSubmit})]});};export default ChangePassword;","map":{"version":3,"sources":["/home/cisco/airportShuttleDeploy/airportShuttleV2/client/src/components/Header/ChangePassword/ChangePassword.tsx"],"names":["Box","InputLabel","TextField","Typography","useState","CustomButton","useStyles","changePasswordApi","useSnackBar","useLanguage","ChangePassword","handleDialogClose","root","title","inputs","label","oldPassword","setOldPassword","newPassword","setNewPassword","updateSnackBarMessage","language","changePassword","passwordType","event","target","value","handleSubmit","passwordInputs","then","data","error","success","classes","input","disableUnderline"],"mappings":"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","sourcesContent":["import { Box, InputLabel, TextField, Typography, Divider } from \"@material-ui/core\";\nimport { useState } from \"react\";\nimport CustomButton from \"../../Button/CustomButton\";\nimport useStyles from './useStyles';\nimport { changePasswordApi } from '../../../helpers/APICalls/login';\nimport { useSnackBar } from \"../../../context/useSnackbarContext\";\nimport { useLanguage } from \"../../../context/useLanguageContext\";\n\ninterface Props {\n    handleDialogClose: () => void;\n}\n\nconst ChangePassword = ({ handleDialogClose }: Props): JSX.Element => {\n    const { root, title, inputs, label } = useStyles();\n    const [oldPassword, setOldPassword] = useState('');\n    const [newPassword, setNewPassword] = useState('');\n    const { updateSnackBarMessage } = useSnackBar();\n    const { language } = useLanguage();\n    \n    const changePassword = (passwordType: string, event: any) => {\n        switch(passwordType) {\n            case 'oldPassword':\n                setOldPassword(event.target.value);\n                break;\n            case 'newPassword':\n                setNewPassword(event.target.value);\n                break;\n            }\n    }\n\n    const handleSubmit = ()  => {\n        const passwordInputs = { oldPassword, newPassword };\n        changePasswordApi(passwordInputs).then((data) => {\n            if (data.error) {\n                updateSnackBarMessage(data.error);\n            } else if (data.success) {\n                updateSnackBarMessage('Password has been updated successfully');\n                handleDialogClose();\n            } else {\n                updateSnackBarMessage('An unexpected error occurred. Please try again !');\n            }\n        }) \n    };\n\n    return (\n        <Box className={root}>\n            <Typography className={title}>\n                { language === 'eng' ? 'Change Password' : 'Şifre Değiştir ' }\n            </Typography>\n            <InputLabel>\n                { language === 'eng' ? 'Old Password' : 'Eski Şifre' }\n            </InputLabel>\n            <TextField\n                type={\"password\"}                \n                value={oldPassword}\n                onChange={(event) => {changePassword('oldPassword', event)}}\n                InputProps={{\n                            classes: { input: inputs },\n                            disableUnderline: true\n                }}                \n            />\n            <InputLabel>\n                { language === 'eng' ? 'New Password' : 'Yeni Şifre' }\n            </InputLabel>\n            <TextField\n                type=\"password\"\n                value={newPassword}\n                onChange={(event) => {changePassword('newPassword', event)}}\n                InputProps={{\n                            classes: { input: inputs },\n                            disableUnderline: true\n                }}\n            />\n            <Box />\n                <CustomButton style='submit' btnText='Submit' onClick={handleSubmit} />\n        </Box>\n    )\n};\n\nexport default ChangePassword;"]},"metadata":{},"sourceType":"module"}