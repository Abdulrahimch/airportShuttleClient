{"ast":null,"code":"var _jsxFileName = \"/home/cisco/airport-shuttle-v2/airportShuttleV2/client/src/pages/Agency/Reservation/ListAgencyReservations.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { format } from 'date-fns';\nimport DataTable from '../../../components/DataTable/DataTable';\nimport { Box } from \"@material-ui/core\";\nimport { agencyTurksihColumns, agencyEngColumns } from '../../../utils/dictionary';\nimport { getReservations, updateReservation } from '../../../helpers/APICalls/agencyReservation';\nimport { useLanguage } from '../../../context/useLanguageContext';\nimport { useSnackBar } from '../../../context/useSnackbarContext';\nimport CustomDialog from \"../../../components/CustomDialog/CustomDialog\";\nimport AssignDriver from \"../Drivers/AssignDriver/AssignDriver\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ListAgencyReservations() {\n  _s();\n\n  const {\n    language\n  } = useLanguage();\n  const {\n    updateSnackBarMessage\n  } = useSnackBar();\n  const [rows, setRows] = useState([]);\n  const [open, setOpen] = useState(false);\n  const [useEffectTrigger, setUseEffectTrigger] = useState(false);\n  const [reservation, setReservation] = useState();\n\n  const handleProcessedClick = cellValues => {\n    const id = cellValues.row._id;\n    const inputs = {\n      status: 'processed'\n    };\n    updateReservation(inputs, id).then(data => {\n      if (data.error) {\n        updateSnackBarMessage(data.error);\n      } else if (data.success) {\n        updateSnackBarMessage('reservation has been processed successfully!');\n        setRows(rows.filter(row => row.id !== cellValues.id));\n      } else {\n        updateSnackBarMessage('An unexpected error occurred. Please try again !');\n      }\n    });\n  };\n\n  const handleUnprocessedClick = cellValues => {\n    const id = cellValues.row._id;\n    const inputs = {\n      status: 'unprocessed'\n    };\n    updateReservation(inputs, id).then(data => {\n      if (data.error) {\n        updateSnackBarMessage(data.error);\n      } else if (data.success) {\n        updateSnackBarMessage('reservation has been unprocessed successfully!');\n        setRows(rows.filter(row => row.id !== cellValues.id));\n      } else {\n        updateSnackBarMessage('An unexpected error occurred. Please try again !');\n      }\n    });\n  };\n\n  const handleConfirmClick = cellValues => {\n    setReservation(cellValues.row);\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const invokeUseEffect = () => {\n    setUseEffectTrigger(!useEffectTrigger);\n  };\n\n  useEffect(() => {\n    getReservations().then(data => {\n      if (data.error) {\n        updateSnackBarMessage(data.error);\n      } else if (data.success) {\n        console.log(data.success);\n        data.success.reservations.map((reservation, idx) => {\n          var _reservation$client;\n\n          reservation.id = idx + 1;\n          const date = new Date(reservation.selectedDate);\n          reservation.date = format(date, \"dd-MM-yyyy kk:mm\");\n          reservation.property = (_reservation$client = reservation.client) === null || _reservation$client === void 0 ? void 0 : _reservation$client.property;\n        });\n        setRows(data.success.reservations);\n      } else {\n        updateSnackBarMessage('An unexpected error occurred. Please try again !');\n      }\n    });\n    return () => {\n      setRows([]);\n    };\n  }, [useEffectTrigger]);\n  const columns = language === 'eng' ? agencyEngColumns(handleProcessedClick, handleUnprocessedClick, handleConfirmClick) : agencyTurksihColumns(handleProcessedClick, handleUnprocessedClick, handleConfirmClick);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(DataTable, {\n      rows: rows,\n      columns: columns\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CustomDialog, {\n      open: open,\n      onClose: handleClose,\n      children: /*#__PURE__*/_jsxDEV(AssignDriver, {\n        reservation: reservation,\n        invokeUseEffect: invokeUseEffect,\n        handleClose: handleClose\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ListAgencyReservations, \"6siaeKjdFAS+TQ16RwwSo3peldk=\", false, function () {\n  return [useLanguage, useSnackBar];\n});\n\n_c = ListAgencyReservations;\n;\nexport default ListAgencyReservations;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListAgencyReservations\");","map":{"version":3,"sources":["/home/cisco/airport-shuttle-v2/airportShuttleV2/client/src/pages/Agency/Reservation/ListAgencyReservations.tsx"],"names":["useEffect","useState","format","DataTable","Box","agencyTurksihColumns","agencyEngColumns","getReservations","updateReservation","useLanguage","useSnackBar","CustomDialog","AssignDriver","ListAgencyReservations","language","updateSnackBarMessage","rows","setRows","open","setOpen","useEffectTrigger","setUseEffectTrigger","reservation","setReservation","handleProcessedClick","cellValues","id","row","_id","inputs","status","then","data","error","success","filter","handleUnprocessedClick","handleConfirmClick","handleClose","invokeUseEffect","console","log","reservations","map","idx","date","Date","selectedDate","property","client","columns"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { format } from 'date-fns';\nimport DataTable from '../../../components/DataTable/DataTable';\nimport { Box } from \"@material-ui/core\";\nimport { agencyTurksihColumns, agencyEngColumns } from '../../../utils/dictionary';\nimport { getReservations, updateReservation } from '../../../helpers/APICalls/agencyReservation';\nimport { useLanguage } from '../../../context/useLanguageContext';\nimport { useSnackBar } from '../../../context/useSnackbarContext';\nimport CustomDialog from \"../../../components/CustomDialog/CustomDialog\";\nimport AssignDriver from \"../Drivers/AssignDriver/AssignDriver\";\nimport { Reservation } from '../../../interface/agencyReservation';\n\nfunction ListAgencyReservations(): JSX.Element {\n    const { language } = useLanguage();\n    const { updateSnackBarMessage } = useSnackBar();\n    const [rows, setRows] = useState<any>([]);\n    const [open, setOpen] = useState<boolean>(false)\n    const [useEffectTrigger, setUseEffectTrigger] = useState<boolean>(false);\n    const [reservation, setReservation] = useState<Reservation>()\n\n    const handleProcessedClick = (cellValues: any) => {\n        const id = cellValues.row._id;\n        const inputs = { status: 'processed' };\n        updateReservation(inputs, id).then((data) => {\n            if (data.error) {\n                updateSnackBarMessage(data.error);\n            } else if (data.success) {\n                updateSnackBarMessage('reservation has been processed successfully!');\n                setRows(rows.filter((row: any) => row.id !== cellValues.id));\n            } else {\n                updateSnackBarMessage('An unexpected error occurred. Please try again !');\n            }\n        })\n    }\n\n    const handleUnprocessedClick = (cellValues: any) => {\n        const id = cellValues.row._id;\n        const inputs = { status: 'unprocessed' };\n        updateReservation(inputs, id).then((data) => {\n            if (data.error) {\n                updateSnackBarMessage(data.error);\n            } else if (data.success) {\n                updateSnackBarMessage('reservation has been unprocessed successfully!');\n                setRows(rows.filter((row: any) => row.id !== cellValues.id));\n            } else {\n                updateSnackBarMessage('An unexpected error occurred. Please try again !');\n            }\n        });\n    };\n\n    const handleConfirmClick = (cellValues: any) => {\n        setReservation(cellValues.row);\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const invokeUseEffect = () => {\n        setUseEffectTrigger(!useEffectTrigger)\n    };\n\n    useEffect(() => {\n        getReservations().then((data) => {\n            if (data.error){\n                updateSnackBarMessage(data.error);\n            } else if (data.success) {\n                console.log(data.success)\n                data.success.reservations.map((reservation, idx) => {\n                    reservation.id = idx + 1;\n                    const date = new Date(reservation.selectedDate)\n                    reservation.date = format(date, \"dd-MM-yyyy kk:mm\");\n                    reservation.property = reservation.client?.property;\n                });\n                setRows(data.success.reservations);\n            } else {\n                updateSnackBarMessage('An unexpected error occurred. Please try again !');\n            }\n\n        });\n        return () => {\n            setRows([]);\n        }\n    }, [useEffectTrigger]);\n\n    const columns = language === 'eng' ? agencyEngColumns(handleProcessedClick, handleUnprocessedClick, handleConfirmClick) \n                                       : agencyTurksihColumns(handleProcessedClick, handleUnprocessedClick, handleConfirmClick);\n\n    return (\n        <Box>\n            <DataTable rows={rows} columns={columns} />\n            <CustomDialog open={open} onClose={handleClose}>\n                <AssignDriver reservation={reservation} invokeUseEffect={invokeUseEffect} handleClose={handleClose} />\n            </CustomDialog>\n        </Box>\n    )\n};\n\nexport default ListAgencyReservations;"]},"metadata":{},"sourceType":"module"}