{"ast":null,"code":"import _slicedToArray from\"/home/cisco/airportShuttleDeploy/airportShuttleV2/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{createContext,useCallback,useContext,useState}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";export var LanguageContext=/*#__PURE__*/createContext({language:'eng',updateLanguage:function updateLanguage(){return null;}});export var LanguageProvider=function LanguageProvider(_ref){var children=_ref.children;var _useState=useState('tr'),_useState2=_slicedToArray(_useState,2),language=_useState2[0],setLanguage=_useState2[1];var updateLanguage=useCallback(function(language){setLanguage(language);},[]);return/*#__PURE__*/_jsx(LanguageContext.Provider,{value:{language:language,updateLanguage:updateLanguage},children:children});};export function useLanguage(){return useContext(LanguageContext);}","map":{"version":3,"sources":["/home/cisco/airportShuttleDeploy/airportShuttleV2/client/src/context/useLanguageContext.tsx"],"names":["createContext","useCallback","useContext","useState","LanguageContext","language","updateLanguage","LanguageProvider","children","setLanguage","useLanguage"],"mappings":"2IAAA,OAASA,aAAT,CAA2CC,WAA3C,CAAwDC,UAAxD,CAAoEC,QAApE,KAAoF,OAApF,C,2CAQA,MAAO,IAAMC,CAAAA,eAAe,cAAGJ,aAAa,CAAmB,CAC3DK,QAAQ,CAAE,KADiD,CAE3DC,cAAc,CAAE,gCAAM,KAAN,EAF2C,CAAnB,CAArC,CAKP,MAAO,IAAMC,CAAAA,gBAAmC,CAAG,QAAtCA,CAAAA,gBAAsC,MAA+B,IAA5BC,CAAAA,QAA4B,MAA5BA,QAA4B,CAC9E,cAAgCL,QAAQ,CAAW,IAAX,CAAxC,wCAAOE,QAAP,eAAiBI,WAAjB,eAEA,GAAMH,CAAAA,cAAc,CAAGL,WAAW,CAAC,SAACI,QAAD,CAAwB,CACvDI,WAAW,CAACJ,QAAD,CAAX,CACD,CAF+B,CAE7B,EAF6B,CAAlC,CAIA,mBACI,KAAC,eAAD,CAAiB,QAAjB,EAA0B,KAAK,CAAE,CAAEA,QAAQ,CAARA,QAAF,CAAYC,cAAc,CAAdA,cAAZ,CAAjC,UAAgEE,QAAhE,EADJ,CAGH,CAVM,CAYP,MAAO,SAASE,CAAAA,WAAT,EAAyC,CAC5C,MAAOR,CAAAA,UAAU,CAACE,eAAD,CAAjB,CACD","sourcesContent":["import { createContext, FunctionComponent, useCallback, useContext, useState } from \"react\"\nimport { Language } from '../interface/Language';\n\ninterface ILanguageContext {\n    language: Language;\n    updateLanguage: (language: Language) => void;\n  }\n\nexport const LanguageContext = createContext<ILanguageContext>({\n    language: 'eng',\n    updateLanguage: () => null,\n  });\n\nexport const LanguageProvider: FunctionComponent = ({ children }): JSX.Element => {\n    const [language, setLanguage] = useState<Language>('tr');\n\n    const updateLanguage = useCallback((language: Language) => {\n        setLanguage(language);\n      }, []);\n    \n    return (\n        <LanguageContext.Provider value={{ language, updateLanguage }}>{children}</LanguageContext.Provider>\n    )\n}\n\nexport function useLanguage(): ILanguageContext {\n    return useContext(LanguageContext);\n  }\n"]},"metadata":{},"sourceType":"module"}