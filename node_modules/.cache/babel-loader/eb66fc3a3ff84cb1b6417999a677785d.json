{"ast":null,"code":"var _jsxFileName = \"/home/cisco/airport-shuttle-v2/airportShuttleV2/client/src/pages/Agency/Payments/ListPayments/ListPayments.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport DataTable from \"../../../../components/DataTable/DataTable\";\nimport { agencyListPaymentEngColumns } from '../../../../utils/dictionary';\nimport { getClientPayments, updatePayment } from '../../../../helpers/APICalls/agencyPayment';\nimport { format } from 'date-fns';\nimport { useSnackBar } from '../../../../context/useSnackbarContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ListPayments(_ref) {\n  _s();\n\n  let {\n    clientId\n  } = _ref;\n  const [rows, setRows] = useState([]);\n  const {\n    updateSnackBarMessage\n  } = useSnackBar();\n  console.log('clientId is: ', clientId);\n\n  const handleCancelClick = cellValues => {\n    const paymentId = cellValues.row._id; // const clientId = cellValues.row.client._id;\n\n    const inputs = {\n      status: 'canceled',\n      clientId\n    };\n    updatePayment(inputs, paymentId).then(data => {\n      if (data.error) {\n        updateSnackBarMessage(data.error.message);\n      } else if (data.success) {\n        updateSnackBarMessage('Payment has been canceled successfully');\n        setRows(rows.filter(row => row.id !== cellValues.id));\n      } else {\n        updateSnackBarMessage('An unexpected error occurred. Please try again !');\n      }\n    });\n  };\n\n  const columns = agencyListPaymentEngColumns(handleCancelClick);\n  useEffect(() => {\n    getClientPayments(clientId).then(data => {\n      if (data.error) {\n        console.log(data.error.message);\n      } else if (data.success) {\n        data.success.payment.map((item, idx) => {\n          var _item$client, _item$client2;\n\n          item.id = idx + 1;\n          item.property = (_item$client = item.client) === null || _item$client === void 0 ? void 0 : _item$client.property;\n          item.email = (_item$client2 = item.client) === null || _item$client2 === void 0 ? void 0 : _item$client2.email;\n          const date = item.createdAt ? new Date(item.createdAt) : new Date();\n          item.createdAt = format(date, \"dd-MM-yyyy kk:mm\");\n        });\n        setRows(data.success.payment);\n      } else {\n        console.log('External Error!');\n      }\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(DataTable, {\n    rows: rows,\n    columns: columns\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ListPayments, \"RmCfIVQv3lbcOfv8DmJSM0bDoiE=\", false, function () {\n  return [useSnackBar];\n});\n\n_c = ListPayments;\n;\nexport default ListPayments;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListPayments\");","map":{"version":3,"sources":["/home/cisco/airport-shuttle-v2/airportShuttleV2/client/src/pages/Agency/Payments/ListPayments/ListPayments.tsx"],"names":["useEffect","useState","DataTable","agencyListPaymentEngColumns","getClientPayments","updatePayment","format","useSnackBar","ListPayments","clientId","rows","setRows","updateSnackBarMessage","console","log","handleCancelClick","cellValues","paymentId","row","_id","inputs","status","then","data","error","message","success","filter","id","columns","payment","map","item","idx","property","client","email","date","createdAt","Date"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport DataTable from \"../../../../components/DataTable/DataTable\";\nimport { agencyListPaymentEngColumns } from '../../../../utils/dictionary';\nimport { getClientPayments, updatePayment } from '../../../../helpers/APICalls/agencyPayment';\nimport { format } from 'date-fns';\nimport { useSnackBar } from '../../../../context/useSnackbarContext';\n\ninterface Props {\n    clientId: String;\n}\n\nfunction ListPayments({ clientId }: Props): JSX.Element {\n    const [rows, setRows] = useState<any>([]);\n    const { updateSnackBarMessage } = useSnackBar();\n    console.log('clientId is: ', clientId)\n    const handleCancelClick = (cellValues: any) => {\n        const paymentId = cellValues.row._id;\n        // const clientId = cellValues.row.client._id;\n        const inputs = { status: 'canceled', clientId };\n        updatePayment(inputs, paymentId).then((data) => {\n            if (data.error) {\n                updateSnackBarMessage(data.error.message)\n            } else if (data.success) {\n                updateSnackBarMessage('Payment has been canceled successfully');\n                setRows(rows.filter((row: any) => row.id !== cellValues.id));\n\n            } else {\n                updateSnackBarMessage('An unexpected error occurred. Please try again !');\n            }\n        })\n    }\n    const columns = agencyListPaymentEngColumns(handleCancelClick);\n    useEffect(() => {\n        getClientPayments(clientId).then((data) => {\n            if (data.error){\n                console.log(data.error.message)\n            } else if (data.success) {\n                data.success.payment.map((item, idx) => {\n                    item.id = idx + 1;\n                    item.property = item.client?.property;\n                    item.email = item.client?.email;\n                    const date = item.createdAt ? new Date(item.createdAt): new Date();\n                    item.createdAt = format(date, \"dd-MM-yyyy kk:mm\")\n                })\n                setRows(data.success.payment);\n            } else {\n                console.log('External Error!');\n            }\n        });\n        }, [])\n    return (\n        <DataTable rows={rows} columns={columns} />\n    )\n};\n\nexport default ListPayments;"]},"metadata":{},"sourceType":"module"}