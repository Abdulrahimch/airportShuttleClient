{"ast":null,"code":"var _jsxFileName = \"/home/cisco/airport-shuttle-v2/airportShuttleV2/client/src/context/useAuthContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useState, useContext, createContext, useEffect, useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport loginWithCookies from '../helpers/APICalls/loginWithCookies';\nimport logoutAPI from '../helpers/APICalls/logout';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext({\n  loggedInUser: undefined,\n  updateLoginContext: () => null,\n  logout: () => null\n});\nexport const AuthProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [loggedInUser, setLoggedInUser] = useState();\n  const history = useHistory();\n  const updateLoginContext = useCallback(data => {\n    setLoggedInUser(data.user);\n    history.push('/');\n  }, [history]);\n  const logout = useCallback(async () => {\n    await logoutAPI().then(() => {\n      history.push('/login');\n      setLoggedInUser(null);\n    }).catch(error => console.error(error));\n  }, [history]);\n  useEffect(() => {\n    const checkLoginWithCookies = async () => {\n      await loginWithCookies().then(data => {\n        if (data.success) {\n          updateLoginContext(data.success);\n          history.push('/');\n        } else {\n          setLoggedInUser(null);\n          history.push('/login');\n        }\n      });\n    };\n\n    checkLoginWithCookies();\n  }, [updateLoginContext, history]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      loggedInUser,\n      updateLoginContext,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 10\n  }, this);\n};\n\n_s(AuthProvider, \"1cljOha3+UlsFTvMCsZExR7F294=\", false, function () {\n  return [useHistory];\n});\n\n_c = AuthProvider;\nexport function useAuth() {\n  _s2();\n\n  return useContext(AuthContext);\n}\n\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/home/cisco/airport-shuttle-v2/airportShuttleV2/client/src/context/useAuthContext.tsx"],"names":["useState","useContext","createContext","useEffect","useCallback","useHistory","loginWithCookies","logoutAPI","AuthContext","loggedInUser","undefined","updateLoginContext","logout","AuthProvider","children","setLoggedInUser","history","data","user","push","then","catch","error","console","checkLoginWithCookies","success","useAuth"],"mappings":";;;;AAAA,SAASA,QAAT,EAAmBC,UAAnB,EAA+BC,aAA/B,EAAiEC,SAAjE,EAA4EC,WAA5E,QAA+F,OAA/F;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAGA,OAAOC,gBAAP,MAA6B,sCAA7B;AACA,OAAOC,SAAP,MAAsB,4BAAtB;;AAQA,OAAO,MAAMC,WAAW,gBAAGN,aAAa,CAAe;AACrDO,EAAAA,YAAY,EAAEC,SADuC;AAErDC,EAAAA,kBAAkB,EAAE,MAAM,IAF2B;AAGrDC,EAAAA,MAAM,EAAE,MAAM;AAHuC,CAAf,CAAjC;AAMP,OAAO,MAAMC,YAA+B,GAAG,QAA+B;AAAA;;AAAA,MAA9B;AAAEC,IAAAA;AAAF,GAA8B;AAC5E,QAAM,CAACL,YAAD,EAAeM,eAAf,IAAkCf,QAAQ,EAAhD;AACA,QAAMgB,OAAO,GAAGX,UAAU,EAA1B;AAEA,QAAMM,kBAAkB,GAAGP,WAAW,CACnCa,IAAD,IAA8B;AAC5BF,IAAAA,eAAe,CAACE,IAAI,CAACC,IAAN,CAAf;AACAF,IAAAA,OAAO,CAACG,IAAR,CAAa,GAAb;AACD,GAJmC,EAKpC,CAACH,OAAD,CALoC,CAAtC;AAQA,QAAMJ,MAAM,GAAGR,WAAW,CAAC,YAAY;AACrC,UAAMG,SAAS,GACZa,IADG,CACE,MAAM;AACVJ,MAAAA,OAAO,CAACG,IAAR,CAAa,QAAb;AACAJ,MAAAA,eAAe,CAAC,IAAD,CAAf;AACD,KAJG,EAKHM,KALG,CAKIC,KAAD,IAAgBC,OAAO,CAACD,KAAR,CAAcA,KAAd,CALnB,CAAN;AAMD,GAPyB,EAOvB,CAACN,OAAD,CAPuB,CAA1B;AASAb,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMqB,qBAAqB,GAAG,YAAY;AACxC,YAAMlB,gBAAgB,GAAGc,IAAnB,CAAyBH,IAAD,IAAuB;AACnD,YAAIA,IAAI,CAACQ,OAAT,EAAkB;AAChBd,UAAAA,kBAAkB,CAACM,IAAI,CAACQ,OAAN,CAAlB;AACAT,UAAAA,OAAO,CAACG,IAAR,CAAa,GAAb;AACD,SAHD,MAGO;AACLJ,UAAAA,eAAe,CAAC,IAAD,CAAf;AACAC,UAAAA,OAAO,CAACG,IAAR,CAAa,QAAb;AACD;AACF,OARK,CAAN;AASD,KAVD;;AAWAK,IAAAA,qBAAqB;AACtB,GAbQ,EAaN,CAACb,kBAAD,EAAqBK,OAArB,CAbM,CAAT;AAeA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEP,MAAAA,YAAF;AAAgBE,MAAAA,kBAAhB;AAAoCC,MAAAA;AAApC,KAA7B;AAAA,cAA4EE;AAA5E;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CArCM;;GAAMD,Y;UAEKR,U;;;KAFLQ,Y;AAuCb,OAAO,SAASa,OAAT,GAAiC;AAAA;;AACtC,SAAOzB,UAAU,CAACO,WAAD,CAAjB;AACD;;IAFekB,O","sourcesContent":["import { useState, useContext, createContext, FunctionComponent, useEffect, useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { AuthApiData, AuthApiDataSuccess } from '../interface/AuthApiData';\nimport { User } from '../interface/User';\nimport loginWithCookies from '../helpers/APICalls/loginWithCookies';\nimport logoutAPI from '../helpers/APICalls/logout';\n\ninterface IAuthContext {\n  loggedInUser: User | null | undefined;\n  updateLoginContext: (data: AuthApiDataSuccess) => void;\n  logout: () => void;\n}\n\nexport const AuthContext = createContext<IAuthContext>({\n  loggedInUser: undefined,\n  updateLoginContext: () => null,\n  logout: () => null,\n});\n\nexport const AuthProvider: FunctionComponent = ({ children }): JSX.Element => {\n  const [loggedInUser, setLoggedInUser] = useState<User | null | undefined>();\n  const history = useHistory();\n\n  const updateLoginContext = useCallback(\n    (data: AuthApiDataSuccess) => {\n      setLoggedInUser(data.user);\n      history.push('/');\n    },\n    [history],\n  );\n\n  const logout = useCallback(async () => {\n    await logoutAPI()\n      .then(() => {\n        history.push('/login');\n        setLoggedInUser(null);\n      })\n      .catch((error: any) => console.error(error));\n  }, [history]);\n\n  useEffect(() => {\n    const checkLoginWithCookies = async () => {\n      await loginWithCookies().then((data: AuthApiData) => {\n        if (data.success) {\n          updateLoginContext(data.success);\n          history.push('/');\n        } else {\n          setLoggedInUser(null);\n          history.push('/login');\n        }\n      });\n    };\n    checkLoginWithCookies();\n  }, [updateLoginContext, history]);\n\n  return <AuthContext.Provider value={{ loggedInUser, updateLoginContext, logout }}>{children}</AuthContext.Provider>;\n};\n\nexport function useAuth(): IAuthContext {\n  return useContext(AuthContext);\n}\n"]},"metadata":{},"sourceType":"module"}