{"ast":null,"code":"var _jsxFileName = \"/home/cisco/airport-shuttle-v2/airportShuttleV2/client/src/pages/ClientReservations/UpdateReservation/UpdateReservation.tsx\",\n    _s = $RefreshSig$();\n\nimport AddReservationForm from \"../AddReservation/AddReservationForm/AddReservationForm\";\nimport useStyles from \"./useStyles\";\nimport { NewReservationDictionary } from '../../../utils/dictionary';\nimport { useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  engPage,\n  turkishPage\n} = NewReservationDictionary;\nlet page = {\n  title: 'rezervasyon ekle',\n  form: turkishPage.form\n};\n\nfunction UpdateReservation() {\n  _s();\n\n  const classes = useStyles(); //     return (\n  //         <>\n  //             <Box>\n  //                 <Formik\n  //                     initialValues={{\n  //                         type: 0,\n  //                         from: 0,\n  //                         to: 0,\n  //                         property: '',\n  //                         pax: 0,\n  //                         flightNo: '',\n  //                         driverNote: '',\n  //                         selectedDate: new Date(),\n  //                         timezone: 0,\n  //                         passengers: []\n  //                     }}\n  //                     validationSchema={Yup.object().shape({ \n  //                         type: Yup.string().required('This Field is required'),\n  //                         from:  Yup.string().required('This Field is required'),\n  //                         to: Yup.string().required('This Field is required'),\n  //                         property: Yup.string().required('This Field is required'),\n  //                         flightNo: Yup.string().required('This Field is required'),\n  //                         driverNote: Yup.string(),\n  //                         selectedDate: Yup.date().required('This Field is required'),\n  //                         pax: Yup.number().min(1).max(10).default(1),\n  //                     })}\n  //                     onSubmit={(values) => {handleSubmit(values)}}\n  //                 >   \n  //                     {({ handleSubmit, handleChange, values, touched, errors, isSubmitting, setFieldValue }) => (\n  //                     <form onSubmit={handleSubmit} className={classes.form} noValidate>\n  //                         <Grid container direction='column' alignItems='center'>\n  //                             <Grid item>\n  //                                 <Grid item container className={classes.itemContainer} spacing={4}>\n  //                                     <Grid item>\n  //                                         <InputLabel id=\"type\" className={classes.inputLabel}>\n  //                                             {type}\n  //                                         </InputLabel>\n  //                                         <Select\n  //                                             id=\"type\"\n  //                                             name=\"type\"\n  //                                             autoWidth\n  //                                             MenuProps={{\n  //                                                 anchorOrigin: {\n  //                                                   vertical: \"bottom\",\n  //                                                   horizontal: \"left\"\n  //                                                 },\n  //                                                 transformOrigin: {\n  //                                                   vertical: \"top\",\n  //                                                   horizontal: \"left\"\n  //                                                 },\n  //                                                 getContentAnchorEl: null\n  //                                             }}\n  //                                             value={values.type}\n  //                                             onChange={handleChange}\n  //                                             classes={{ select: classes.select }}\n  //                                         >\n  //                                             <MenuItem value={1}>Airport to Resort</MenuItem>\n  //                                             <MenuItem value={2}>Resort to Airport</MenuItem>\n  //                                         </Select>\n  //                                         <FormHelperText error={Boolean(errors.type)}>{errors.type}</FormHelperText>\n  //                                     </Grid>\n  //                                     <Grid item> \n  //                                         <InputLabel className={classes.inputLabel}>\n  //                                             {pax}\n  //                                         </InputLabel>\n  //                                         <Select\n  //                                             id=\"pax\"\n  //                                             name=\"pax\"\n  //                                             autoWidth\n  //                                             MenuProps={{\n  //                                                 anchorOrigin: {\n  //                                                   vertical: \"bottom\",\n  //                                                   horizontal: \"left\"\n  //                                                 },\n  //                                                 transformOrigin: {\n  //                                                   vertical: \"top\",\n  //                                                   horizontal: \"left\"\n  //                                                 },\n  //                                                 getContentAnchorEl: null\n  //                                             }}\n  //                                             value={values.pax}\n  //                                             onChange={handleChange}\n  //                                             classes={{ select: classes.select }}\n  //                                         >\n  //                                             {\n  //                                                 Array(10).fill(0).map((_, idx) => (\n  //                                                 <MenuItem className={classes.menuItem} value={idx+1}>{idx+1}</MenuItem>\n  //                                             ))}\n  //                                         </Select>\n  //                                         <FormHelperText error={Boolean(errors.pax)}>{errors.pax}</FormHelperText>\n  //                                     </Grid>\n  //                                 </Grid>\n  //                             </Grid>\n  //                             <Grid item >\n  //                                 <Grid item container className={classes.itemContainer} spacing={4}>\n  //                                     <Grid item>\n  //                                         <InputLabel className={classes.inputLabel}>\n  //                                             {from}\n  //                                         </InputLabel>\n  //                                         <Select\n  //                                             id=\"from\"\n  //                                             name=\"from\"\n  //                                             autoWidth\n  //                                             MenuProps={{\n  //                                                 anchorOrigin: {\n  //                                                   vertical: \"bottom\",\n  //                                                   horizontal: \"left\"\n  //                                                 },\n  //                                                 transformOrigin: {\n  //                                                   vertical: \"top\",\n  //                                                   horizontal: \"left\"\n  //                                                 },\n  //                                                 getContentAnchorEl: null\n  //                                             }}\n  //                                             value={values.from}\n  //                                             onChange={handleChange}\n  //                                             classes={{ select: classes.select }}\n  //                                             >\n  //                                             {values.type === 1 ? airports.map((airport) => (\n  //                                                 <MenuItem value={airport.value}>{airport.name}</MenuItem>\n  //                                             )): resorts.map((resort) => (\n  //                                                 <MenuItem value={resort.value}>{resort.name}</MenuItem>\n  //                                             ))\n  //                                             }\n  //                                         </Select>\n  //                                         <FormHelperText error={Boolean(errors.from)}>{errors.from}</FormHelperText>\n  //                                     </Grid>\n  //                                     <Grid item>\n  //                                         <InputLabel className={classes.inputLabel}>\n  //                                             {to}\n  //                                         </InputLabel>\n  //                                         <Select\n  //                                             id=\"to\"\n  //                                             name=\"to\"\n  //                                             autoWidth\n  //                                             MenuProps={{\n  //                                                 anchorOrigin: {\n  //                                                   vertical: \"bottom\",\n  //                                                   horizontal: \"left\"\n  //                                                 },\n  //                                                 transformOrigin: {\n  //                                                   vertical: \"top\",\n  //                                                   horizontal: \"left\"\n  //                                                 },\n  //                                                 getContentAnchorEl: null\n  //                                             }}\n  //                                             value={values.to}\n  //                                             onChange={handleChange}\n  //                                             classes={{ select: classes.select }}\n  //                                         >\n  //                                             {values.type === 2 ? airports.map((airport) => (\n  //                                                 <MenuItem value={airport.value}>{airport.name}</MenuItem>\n  //                                             )): resorts.map((resort) => (\n  //                                                 <MenuItem value={resort.value}>{resort.name}</MenuItem>\n  //                                             ))\n  //                                             }\n  //                                         </Select>\n  //                                         <FormHelperText error={Boolean(errors.to)}>{errors.to}</FormHelperText>\n  //                                     </Grid>\n  //                                 </Grid>\n  //                             </Grid>\n  //                             <Grid item>\n  //                                 <Grid item container className={classes.itemContainer} spacing={6}>\n  //                                     <Grid item>\n  //                                         <InputLabel className={classes.inputLabel}>\n  //                                             {property}\n  //                                         </InputLabel>\n  //                                         <TextField \n  //                                             id='property'\n  //                                             name='property'\n  //                                             error={Boolean(errors.property)}\n  //                                             helperText={errors.property}\n  //                                             InputProps= {{\n  //                                                 classes: { input: classes.inputs },\n  //                                                 disableUnderline: true\n  //                                             }}\n  //                                             value={values.property}\n  //                                             onChange={handleChange}\n  //                                         />\n  //                                     </Grid>\n  //                                     <Grid item>\n  //                                         <InputLabel className={classes.inputLabel}>\n  //                                             {flightNo}\n  //                                         </InputLabel>\n  //                                         <TextField \n  //                                             id='flightNo'\n  //                                             name='flightNo'\n  //                                             InputProps= {{\n  //                                                 classes: { input: classes.inputs },\n  //                                                 disableUnderline: true\n  //                                             }}\n  //                                             value={values.flightNo}\n  //                                             onChange={handleChange}\n  //                                         />\n  //                                     </Grid>\n  //                                 </Grid>\n  //                             </Grid>\n  //                             <Grid item>\n  //                                 <Grid item container className={classes.itemContainer} spacing={6}>\n  //                                     <MuiPickersUtilsProvider utils={DateFnsUtils}>\n  //                                         <Grid item >\n  //                                             <InputLabel className={classes.inputLabel}>\n  //                                                 {selectedDate}\n  //                                             </InputLabel>\n  //                                             <MuiPickersUtilsProvider utils={DateFnsUtils}>\n  //                                                 <DateTimePicker\n  //                                                     InputProps= {{\n  //                                                         classes: { input: classes.inputs },\n  //                                                         disableUnderline: true\n  //                                                     }}\n  //                                                     value={values.selectedDate}\n  //                                                     onChange={(date: any) => setFieldValue('selectedDate', date)}\n  //                                             />\n  //                                             </MuiPickersUtilsProvider>\n  //                                         </Grid>\n  //                                     </MuiPickersUtilsProvider>\n  //                                 </Grid>\n  //                             </Grid>\n  //                             <Grid item>\n  //                                 <InputLabel className={classes.inputLabel}>\n  //                                     {driverNote}\n  //                                 </InputLabel>\n  //                                 <TextField \n  //                                     id='driverNote'\n  //                                     name='driverNote'\n  //                                     multiline\n  //                                     rows={4}\n  //                                     InputProps= {{\n  //                                         classes: { input: classes.inputs },\n  //                                         disableUnderline: true\n  //                                     }}\n  //                                     value={values.driverNote}\n  //                                     onChange={handleChange}\n  //                                 />\n  //                             </Grid>\n  //                             <Grid item lg={6}>\n  //                                 <Grid item container className={classes.itemContainer} spacing={4} >\n  //                                     <FieldArray name=\"passengers\">\n  //                                         {\n  //                                             (fieldArrayProps ) => {\n  //                                                 const { form } = fieldArrayProps;\n  //                                                 const { values } = form;\n  //                                                 const { pax } = values;\n  //                                                 let allPassengers = new Array(pax).fill('');\n  //                                                 return ( \n  //                                                     <Form>\n  //                                                         {\n  //                                                             allPassengers.map((passenger: any, index: number) => (\n  //                                                                 <Box>\n  //                                                                     <InputLabel className={classes.fieldInputLabel}>\n  //                                                                         passenger {index + 1} full name \n  //                                                                     </InputLabel>\n  //                                                                     <Field\n  //                                                                         id={`passengers[${index}]`}\n  //                                                                         name={`passengers[${index}]`}\n  //                                                                         className={classes.select}\n  //                                                                         style={{ position: 'relative' }}\n  //                                                                     />\n  //                                                                 </Box>\n  //                                                             ))\n  //                                                         }\n  //                                                     </Form>\n  //                                                 )   \n  //                                             }\n  //                                         }\n  //                                     </FieldArray>\n  //                                 </Grid>\n  //                             </Grid>\n  //                             <Grid item>\n  //                                 <Button size=\"large\" type=\"submit\" variant=\"contained\" color=\"primary\" className={classes.submit}>\n  //                                     {isSubmitting ? <CircularProgress className={classes.circularProgress} /> : 'Submit'} \n  //                                 </Button>\n  //                             </Grid>\n  //                         </Grid>\n  //                     </form>\n  //                     )}\n  //                 </Formik>\n  //             </Box>\n  //         </>\n  //     )\n  // }\n  // };\n\n  const lan = 'tr';\n\n  const handleSubmit = () => {\n    console.log('updating your reservation ');\n  };\n\n  useEffect(() => {\n    if (lan === 'tr') page = turkishPage;else page = engPage;\n  }, []);\n  const initValues = {\n    type: 1,\n    from: 0,\n    to: 0,\n    property: '',\n    pax: 5,\n    flightNo: 'tk123',\n    driverNote: '',\n    selectedDate: new Date(),\n    timezone: 0,\n    passengers: []\n  };\n  return /*#__PURE__*/_jsxDEV(AddReservationForm, {\n    form: page.form,\n    handleSubmit: handleSubmit,\n    initValues: initValues\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 328,\n    columnNumber: 9\n  }, this);\n}\n\n_s(UpdateReservation, \"OAQf9SHEQQsOOZKjohcuI3tGtQ0=\", false, function () {\n  return [useStyles];\n});\n\n_c = UpdateReservation;\n;\nexport default UpdateReservation;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateReservation\");","map":{"version":3,"sources":["/home/cisco/airport-shuttle-v2/airportShuttleV2/client/src/pages/ClientReservations/UpdateReservation/UpdateReservation.tsx"],"names":["AddReservationForm","useStyles","NewReservationDictionary","useEffect","engPage","turkishPage","page","title","form","UpdateReservation","classes","lan","handleSubmit","console","log","initValues","type","from","to","property","pax","flightNo","driverNote","selectedDate","Date","timezone","passengers"],"mappings":";;;AAMA,OAAOA,kBAAP,MAA+B,yDAA/B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,wBAAT,QAAyC,2BAAzC;AACA,SAASC,SAAT,QAA0B,OAA1B;;AAGA,MAAM;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAA2BH,wBAAjC;AACA,IAAII,IAAU,GAAG;AAACC,EAAAA,KAAK,EAAE,kBAAR;AAA4BC,EAAAA,IAAI,EAAEH,WAAW,CAACG;AAA9C,CAAjB;;AAEA,SAASC,iBAAT,GAA0C;AAAA;;AACtC,QAAMC,OAAO,GAAGT,SAAS,EAAzB,CADsvBC,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACH,GAFD;;AAIAX,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIQ,GAAG,KAAK,IAAZ,EAAkBL,IAAI,GAAGD,WAAP,CAAlB,KACKC,IAAI,GAAGF,OAAP;AACR,GAHQ,EAGN,EAHM,CAAT;AAKA,QAAMW,UAAU,GAAG;AACfC,IAAAA,IAAI,EAAE,CADS;AAEfC,IAAAA,IAAI,EAAE,CAFS;AAGfC,IAAAA,EAAE,EAAE,CAHW;AAIfC,IAAAA,QAAQ,EAAE,EAJK;AAKfC,IAAAA,GAAG,EAAE,CALU;AAMfC,IAAAA,QAAQ,EAAE,OANK;AAOfC,IAAAA,UAAU,EAAE,EAPG;AAQfC,IAAAA,YAAY,EAAE,IAAIC,IAAJ,EARC;AASfC,IAAAA,QAAQ,EAAE,CATK;AAUfC,IAAAA,UAAU,EAAE;AAVG,GAAnB;AAYA,sBACI,QAAC,kBAAD;AAAqB,IAAA,IAAI,EAAEpB,IAAI,CAACE,IAAhC;AAAsC,IAAA,YAAY,EAAEI,YAApD;AAAkE,IAAA,UAAU,EAAEG;AAA9E;AAAA;AAAA;AAAA;AAAA,UADJ;AAGC;;GA1TIN,iB;UACWR,S;;;KADXQ,iB;AA0TJ;AACL,eAAeA,iBAAf","sourcesContent":["import DateFnsUtils from \"@date-io/date-fns\";\nimport { Box, Grid, TextField, InputLabel, Select, MenuItem, FormHelperText, Button, CircularProgress } from \"@material-ui/core\";\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport { Formik } from \"formik\";\nimport  * as Yup from 'yup';\nimport AddReservation from \"../AddReservation/AddReservation\";\nimport AddReservationForm from \"../AddReservation/AddReservationForm/AddReservationForm\";\nimport useStyles from \"./useStyles\";\nimport { NewReservationDictionary } from '../../../utils/dictionary';\nimport { useEffect } from \"react\";\nimport { Page } from \"../../../interface/Reservation\";\n\nconst { engPage, turkishPage } = NewReservationDictionary;\nlet page: Page = {title: 'rezervasyon ekle', form: turkishPage.form};\n\nfunction UpdateReservation(): JSX.Element {\n    const classes = useStyles();\n\n//     return (\n//         <>\n//             <Box>\n//                 <Formik\n//                     initialValues={{\n//                         type: 0,\n//                         from: 0,\n//                         to: 0,\n//                         property: '',\n//                         pax: 0,\n//                         flightNo: '',\n//                         driverNote: '',\n//                         selectedDate: new Date(),\n//                         timezone: 0,\n//                         passengers: []\n//                     }}\n//                     validationSchema={Yup.object().shape({ \n//                         type: Yup.string().required('This Field is required'),\n//                         from:  Yup.string().required('This Field is required'),\n//                         to: Yup.string().required('This Field is required'),\n//                         property: Yup.string().required('This Field is required'),\n//                         flightNo: Yup.string().required('This Field is required'),\n//                         driverNote: Yup.string(),\n//                         selectedDate: Yup.date().required('This Field is required'),\n//                         pax: Yup.number().min(1).max(10).default(1),\n//                     })}\n//                     onSubmit={(values) => {handleSubmit(values)}}\n//                 >   \n//                     {({ handleSubmit, handleChange, values, touched, errors, isSubmitting, setFieldValue }) => (\n//                     <form onSubmit={handleSubmit} className={classes.form} noValidate>\n//                         <Grid container direction='column' alignItems='center'>\n//                             <Grid item>\n//                                 <Grid item container className={classes.itemContainer} spacing={4}>\n//                                     <Grid item>\n//                                         <InputLabel id=\"type\" className={classes.inputLabel}>\n//                                             {type}\n//                                         </InputLabel>\n//                                         <Select\n//                                             id=\"type\"\n//                                             name=\"type\"\n//                                             autoWidth\n//                                             MenuProps={{\n//                                                 anchorOrigin: {\n//                                                   vertical: \"bottom\",\n//                                                   horizontal: \"left\"\n//                                                 },\n//                                                 transformOrigin: {\n//                                                   vertical: \"top\",\n//                                                   horizontal: \"left\"\n//                                                 },\n//                                                 getContentAnchorEl: null\n//                                             }}\n//                                             value={values.type}\n//                                             onChange={handleChange}\n//                                             classes={{ select: classes.select }}\n//                                         >\n//                                             <MenuItem value={1}>Airport to Resort</MenuItem>\n//                                             <MenuItem value={2}>Resort to Airport</MenuItem>\n//                                         </Select>\n//                                         <FormHelperText error={Boolean(errors.type)}>{errors.type}</FormHelperText>\n//                                     </Grid>\n//                                     <Grid item> \n//                                         <InputLabel className={classes.inputLabel}>\n//                                             {pax}\n//                                         </InputLabel>\n//                                         <Select\n//                                             id=\"pax\"\n//                                             name=\"pax\"\n//                                             autoWidth\n//                                             MenuProps={{\n//                                                 anchorOrigin: {\n//                                                   vertical: \"bottom\",\n//                                                   horizontal: \"left\"\n//                                                 },\n//                                                 transformOrigin: {\n//                                                   vertical: \"top\",\n//                                                   horizontal: \"left\"\n//                                                 },\n//                                                 getContentAnchorEl: null\n//                                             }}\n//                                             value={values.pax}\n//                                             onChange={handleChange}\n//                                             classes={{ select: classes.select }}\n//                                         >\n//                                             {\n//                                                 Array(10).fill(0).map((_, idx) => (\n//                                                 <MenuItem className={classes.menuItem} value={idx+1}>{idx+1}</MenuItem>\n//                                             ))}\n                                            \n//                                         </Select>\n//                                         <FormHelperText error={Boolean(errors.pax)}>{errors.pax}</FormHelperText>\n//                                     </Grid>\n//                                 </Grid>\n//                             </Grid>\n//                             <Grid item >\n//                                 <Grid item container className={classes.itemContainer} spacing={4}>\n//                                     <Grid item>\n//                                         <InputLabel className={classes.inputLabel}>\n//                                             {from}\n//                                         </InputLabel>\n//                                         <Select\n//                                             id=\"from\"\n//                                             name=\"from\"\n//                                             autoWidth\n//                                             MenuProps={{\n//                                                 anchorOrigin: {\n//                                                   vertical: \"bottom\",\n//                                                   horizontal: \"left\"\n//                                                 },\n//                                                 transformOrigin: {\n//                                                   vertical: \"top\",\n//                                                   horizontal: \"left\"\n//                                                 },\n//                                                 getContentAnchorEl: null\n//                                             }}\n//                                             value={values.from}\n//                                             onChange={handleChange}\n//                                             classes={{ select: classes.select }}\n//                                             >\n//                                             {values.type === 1 ? airports.map((airport) => (\n//                                                 <MenuItem value={airport.value}>{airport.name}</MenuItem>\n//                                             )): resorts.map((resort) => (\n//                                                 <MenuItem value={resort.value}>{resort.name}</MenuItem>\n//                                             ))\n//                                             }\n//                                         </Select>\n//                                         <FormHelperText error={Boolean(errors.from)}>{errors.from}</FormHelperText>\n//                                     </Grid>\n//                                     <Grid item>\n//                                         <InputLabel className={classes.inputLabel}>\n//                                             {to}\n//                                         </InputLabel>\n//                                         <Select\n//                                             id=\"to\"\n//                                             name=\"to\"\n//                                             autoWidth\n//                                             MenuProps={{\n//                                                 anchorOrigin: {\n//                                                   vertical: \"bottom\",\n//                                                   horizontal: \"left\"\n//                                                 },\n//                                                 transformOrigin: {\n//                                                   vertical: \"top\",\n//                                                   horizontal: \"left\"\n//                                                 },\n//                                                 getContentAnchorEl: null\n//                                             }}\n//                                             value={values.to}\n//                                             onChange={handleChange}\n//                                             classes={{ select: classes.select }}\n//                                         >\n//                                             {values.type === 2 ? airports.map((airport) => (\n//                                                 <MenuItem value={airport.value}>{airport.name}</MenuItem>\n//                                             )): resorts.map((resort) => (\n//                                                 <MenuItem value={resort.value}>{resort.name}</MenuItem>\n//                                             ))\n//                                             }\n//                                         </Select>\n//                                         <FormHelperText error={Boolean(errors.to)}>{errors.to}</FormHelperText>\n//                                     </Grid>\n//                                 </Grid>\n//                             </Grid>\n//                             <Grid item>\n//                                 <Grid item container className={classes.itemContainer} spacing={6}>\n//                                     <Grid item>\n//                                         <InputLabel className={classes.inputLabel}>\n//                                             {property}\n//                                         </InputLabel>\n//                                         <TextField \n//                                             id='property'\n//                                             name='property'\n//                                             error={Boolean(errors.property)}\n//                                             helperText={errors.property}\n//                                             InputProps= {{\n//                                                 classes: { input: classes.inputs },\n//                                                 disableUnderline: true\n//                                             }}\n//                                             value={values.property}\n//                                             onChange={handleChange}\n                                            \n//                                         />\n//                                     </Grid>\n//                                     <Grid item>\n//                                         <InputLabel className={classes.inputLabel}>\n//                                             {flightNo}\n//                                         </InputLabel>\n//                                         <TextField \n//                                             id='flightNo'\n//                                             name='flightNo'\n//                                             InputProps= {{\n//                                                 classes: { input: classes.inputs },\n//                                                 disableUnderline: true\n//                                             }}\n//                                             value={values.flightNo}\n//                                             onChange={handleChange}\n                                            \n//                                         />\n//                                     </Grid>\n//                                 </Grid>\n//                             </Grid>\n//                             <Grid item>\n//                                 <Grid item container className={classes.itemContainer} spacing={6}>\n//                                     <MuiPickersUtilsProvider utils={DateFnsUtils}>\n//                                         <Grid item >\n//                                             <InputLabel className={classes.inputLabel}>\n//                                                 {selectedDate}\n//                                             </InputLabel>\n//                                             <MuiPickersUtilsProvider utils={DateFnsUtils}>\n//                                                 <DateTimePicker\n//                                                     InputProps= {{\n//                                                         classes: { input: classes.inputs },\n//                                                         disableUnderline: true\n//                                                     }}\n//                                                     value={values.selectedDate}\n//                                                     onChange={(date: any) => setFieldValue('selectedDate', date)}\n//                                             />\n//                                             </MuiPickersUtilsProvider>\n//                                         </Grid>\n//                                     </MuiPickersUtilsProvider>\n//                                 </Grid>\n//                             </Grid>\n//                             <Grid item>\n//                                 <InputLabel className={classes.inputLabel}>\n//                                     {driverNote}\n//                                 </InputLabel>\n//                                 <TextField \n//                                     id='driverNote'\n//                                     name='driverNote'\n//                                     multiline\n//                                     rows={4}\n//                                     InputProps= {{\n//                                         classes: { input: classes.inputs },\n//                                         disableUnderline: true\n//                                     }}\n//                                     value={values.driverNote}\n//                                     onChange={handleChange}\n//                                 />\n//                             </Grid>\n//                             <Grid item lg={6}>\n//                                 <Grid item container className={classes.itemContainer} spacing={4} >\n//                                     <FieldArray name=\"passengers\">\n//                                         {\n//                                             (fieldArrayProps ) => {\n//                                                 const { form } = fieldArrayProps;\n//                                                 const { values } = form;\n//                                                 const { pax } = values;\n//                                                 let allPassengers = new Array(pax).fill('');\n//                                                 return ( \n//                                                     <Form>\n//                                                         {\n//                                                             allPassengers.map((passenger: any, index: number) => (\n//                                                                 <Box>\n//                                                                     <InputLabel className={classes.fieldInputLabel}>\n//                                                                         passenger {index + 1} full name \n//                                                                     </InputLabel>\n//                                                                     <Field\n//                                                                         id={`passengers[${index}]`}\n//                                                                         name={`passengers[${index}]`}\n//                                                                         className={classes.select}\n//                                                                         style={{ position: 'relative' }}\n                                                                        \n//                                                                     />\n//                                                                 </Box>\n//                                                             ))\n//                                                         }\n//                                                     </Form>\n//                                                 )   \n//                                             }\n//                                         }\n//                                     </FieldArray>\n//                                 </Grid>\n//                             </Grid>\n//                             <Grid item>\n//                                 <Button size=\"large\" type=\"submit\" variant=\"contained\" color=\"primary\" className={classes.submit}>\n//                                     {isSubmitting ? <CircularProgress className={classes.circularProgress} /> : 'Submit'} \n//                                 </Button>\n//                             </Grid>\n//                         </Grid>\n//                     </form>\n//                     )}\n//                 </Formik>\n//             </Box>\n//         </>\n//     )\n// }\n// };\n    const lan = 'tr';\n    const handleSubmit = () => {\n        console.log('updating your reservation ')\n    }\n\n    useEffect(() => { \n        if (lan === 'tr') page = turkishPage; \n        else page = engPage;\n    }, [])\n    \n    const initValues = {\n        type: 1,\n        from: 0,\n        to: 0,\n        property: '',\n        pax: 5,\n        flightNo: 'tk123',\n        driverNote: '',\n        selectedDate: new Date(),\n        timezone: 0,\n        passengers: []\n};\n    return (\n        <AddReservationForm  form={page.form} handleSubmit={handleSubmit} initValues={initValues}/>\n    )\n    };\nexport default UpdateReservation;"]},"metadata":{},"sourceType":"module"}