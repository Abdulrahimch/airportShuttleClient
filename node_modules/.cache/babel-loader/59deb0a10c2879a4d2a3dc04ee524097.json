{"ast":null,"code":"import _slicedToArray from\"/home/cisco/airportShuttleDeploy/airportShuttleV2/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from\"react\";import DataTable from\"../../../../components/DataTable/DataTable\";import{getClientPayments,updatePayment}from'../../../../helpers/APICalls/agencyPayment';import{format}from'date-fns';import{useSnackBar}from'../../../../context/useSnackbarContext';import{agencyListPaymentEngColumns,agencyListPaymentTurkishColumns}from'../../../../utils/dictionary';import{useLanguage}from'../../../../context/useLanguageContext';import{jsx as _jsx}from\"react/jsx-runtime\";function ListPayments(_ref){var clientId=_ref.clientId;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),rows=_useState2[0],setRows=_useState2[1];var _useSnackBar=useSnackBar(),updateSnackBarMessage=_useSnackBar.updateSnackBarMessage;var _useLanguage=useLanguage(),language=_useLanguage.language;var handleCancelClick=function handleCancelClick(cellValues){var paymentId=cellValues.row._id;var inputs={status:'canceled',clientId:clientId};updatePayment(inputs,paymentId).then(function(data){if(data.error){updateSnackBarMessage(data.error.message);}else if(data.success){updateSnackBarMessage('Payment has been canceled successfully');setRows(rows.filter(function(row){return row.id!==cellValues.id;}));}else{updateSnackBarMessage('An unexpected error occurred. Please try again !');}});};var columns=language==='eng'?agencyListPaymentEngColumns(handleCancelClick):agencyListPaymentTurkishColumns(handleCancelClick);useEffect(function(){getClientPayments(clientId).then(function(data){if(data.error){console.log(data.error.message);}else if(data.success){data.success.payment.map(function(item,idx){var _item$client,_item$client2;item.id=idx+1;item.status='payment';item.property=(_item$client=item.client)===null||_item$client===void 0?void 0:_item$client.property;item.email=(_item$client2=item.client)===null||_item$client2===void 0?void 0:_item$client2.email;var date=item.createdAt?new Date(item.createdAt):new Date();item.createdAt=format(date,\"dd-MM-yyyy kk:mm\");});setRows(data.success.payment);}else{console.log('External Error!');}});},[]);return/*#__PURE__*/_jsx(DataTable,{rows:rows,columns:columns});};export default ListPayments;","map":{"version":3,"sources":["/home/cisco/airportShuttleDeploy/airportShuttleV2/client/src/pages/Agency/Payments/ListPayments/ListPayments.tsx"],"names":["useEffect","useState","DataTable","getClientPayments","updatePayment","format","useSnackBar","agencyListPaymentEngColumns","agencyListPaymentTurkishColumns","useLanguage","ListPayments","clientId","rows","setRows","updateSnackBarMessage","language","handleCancelClick","cellValues","paymentId","row","_id","inputs","status","then","data","error","message","success","filter","id","columns","console","log","payment","map","item","idx","property","client","email","date","createdAt","Date"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport DataTable from \"../../../../components/DataTable/DataTable\";\nimport { getClientPayments, updatePayment } from '../../../../helpers/APICalls/agencyPayment';\nimport { format } from 'date-fns';\nimport { useSnackBar } from '../../../../context/useSnackbarContext';\nimport { \n        agencyListPaymentEngColumns, \n        agencyListPaymentTurkishColumns \n       } from '../../../../utils/dictionary';\n\nimport { useLanguage } from '../../../../context/useLanguageContext';\n\ninterface Props {\n    clientId: String;\n}\n\nfunction ListPayments({ clientId }: Props): JSX.Element {\n    const [rows, setRows] = useState<any>([]);\n    const { updateSnackBarMessage } = useSnackBar();\n    const { language } = useLanguage();\n\n    const handleCancelClick = (cellValues: any) => {\n        const paymentId = cellValues.row._id;\n        const inputs = { status: 'canceled', clientId };\n        updatePayment(inputs, paymentId).then((data) => {\n            if (data.error) {\n                updateSnackBarMessage(data.error.message)\n            } else if (data.success) {\n                updateSnackBarMessage('Payment has been canceled successfully');\n                setRows(rows.filter((row: any) => row.id !== cellValues.id));\n\n            } else {\n                updateSnackBarMessage('An unexpected error occurred. Please try again !');\n            }\n        })\n    }\n    const columns = language === 'eng' ? agencyListPaymentEngColumns(handleCancelClick) : agencyListPaymentTurkishColumns(handleCancelClick);\n    useEffect(() => {\n        getClientPayments(clientId).then((data) => {\n            if (data.error){\n                console.log(data.error.message)\n            } else if (data.success) {\n                data.success.payment.map((item, idx) => {\n                    item.id = idx + 1;\n                    item.status = 'payment';\n                    item.property = item.client?.property;\n                    item.email = item.client?.email;\n                    const date = item.createdAt ? new Date(item.createdAt): new Date();\n                    item.createdAt = format(date, \"dd-MM-yyyy kk:mm\")\n                })\n                setRows(data.success.payment);\n            } else {\n                console.log('External Error!');\n            }\n        });\n        }, [])\n    return (\n        <DataTable rows={rows} columns={columns} />\n    )\n};\n\nexport default ListPayments;"]},"metadata":{},"sourceType":"module"}