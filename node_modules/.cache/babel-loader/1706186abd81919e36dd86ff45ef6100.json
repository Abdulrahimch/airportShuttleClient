{"ast":null,"code":"var _jsxFileName = \"/home/cisco/airport-shuttle-v2/airportShuttleV2/client/src/pages/ClientReservations/ListReservations.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport useStyles from './useStyles';\nimport { format } from 'date-fns';\nimport { Box } from '@material-ui/core';\nimport DataTable from '../../components/DataTable/DataTable';\nimport { engColumn, turksihColumns } from '../../utils/dictionary';\nimport { getReservations } from '../../helpers/APICalls/reservation';\nimport { deleteReservation } from '../../helpers/APICalls/reservation';\nimport { useSnackBar } from '../../context/useSnackbarContext';\nimport CustomDialog from '../../components/CustomDialog/CustomDialog';\nimport UpdateReservation from './UpdateReservation/UpdateReservation';\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet lan = 'eng';\n\nfunction ListReservations() {\n  _s();\n\n  const classes = useStyles();\n  const history = useHistory();\n  const {\n    updateSnackBarMessage\n  } = useSnackBar();\n  const [rows, setRows] = useState([]);\n  const [open, setOpen] = useState(false);\n  const [updated, setUpdated] = useState(false);\n  const [initValues, setInitValues] = useState({\n    type: 0,\n    from: 0,\n    to: 0,\n    property: '',\n    pax: 5,\n    flightNo: '',\n    driverNote: '',\n    selectedDate: new Date(),\n    timezone: 0,\n    passengers: []\n  });\n\n  const handleDialogClose = () => {\n    setOpen(false);\n  };\n\n  const handleCacelClick = cellValues => {\n    const id = cellValues.row._id;\n    deleteReservation(id).then(data => {\n      if (data.error) {\n        updateSnackBarMessage(data.error.message);\n      } else if (data.success) {\n        updateSnackBarMessage('reservation deleted!');\n        setRows(rows.filter(row => row.id !== cellValues.id));\n      } else {\n        updateSnackBarMessage('An unexpected error occurred. Please try again !');\n      }\n    });\n  };\n\n  const handleEditClick = cellValues => {\n    setInitValues(cellValues.row);\n    setOpen(true);\n  };\n\n  const columns = lan === 'tr' ? turksihColumns(handleEditClick, handleCacelClick) : engColumn(handleEditClick, handleCacelClick);\n  useEffect(() => {\n    getReservations().then(data => {\n      if (data.error) {\n        console.log(data.error);\n      } else if (data.success) {\n        data.success.reservations.map((reservation, idx) => {\n          reservation.id = idx + 1;\n          const date = new Date(reservation.selectedDate);\n          reservation.date = format(date, \"dd-MM-yyyy kk:mm\");\n        });\n        setRows(data.success.reservations);\n      } else {\n        console.log('External error');\n      }\n    });\n    return () => {\n      setRows([]);\n    };\n  }, [history, open]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(DataTable, {\n      rows: rows,\n      columns: columns\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CustomDialog, {\n      open: open,\n      onClose: handleDialogClose // eslint-disable-next-line react/style-prop-object\n      ,\n      style: 'updateReservation',\n      children: /*#__PURE__*/_jsxDEV(UpdateReservation, {\n        initValues: initValues,\n        setOpen: setOpen\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ListReservations, \"W08nyVc5hS3sRtpQ5mGGEO0i4e0=\", false, function () {\n  return [useStyles, useHistory, useSnackBar];\n});\n\n_c = ListReservations;\nexport default ListReservations;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListReservations\");","map":{"version":3,"sources":["/home/cisco/airport-shuttle-v2/airportShuttleV2/client/src/pages/ClientReservations/ListReservations.tsx"],"names":["useEffect","useState","useStyles","format","Box","DataTable","engColumn","turksihColumns","getReservations","deleteReservation","useSnackBar","CustomDialog","UpdateReservation","useHistory","lan","ListReservations","classes","history","updateSnackBarMessage","rows","setRows","open","setOpen","updated","setUpdated","initValues","setInitValues","type","from","to","property","pax","flightNo","driverNote","selectedDate","Date","timezone","passengers","handleDialogClose","handleCacelClick","cellValues","id","row","_id","then","data","error","message","success","filter","handleEditClick","columns","console","log","reservations","map","reservation","idx","date","root"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport useStyles from './useStyles';\nimport { format } from 'date-fns';\nimport { Box } from '@material-ui/core';\nimport DataTable from '../../components/DataTable/DataTable';\nimport { engColumn, turksihColumns } from '../../utils/dictionary';\nimport { getReservations } from '../../helpers/APICalls/reservation';\nimport { deleteReservation } from '../../helpers/APICalls/reservation';\nimport { useSnackBar } from '../../context/useSnackbarContext';\nimport CustomDialog from '../../components/CustomDialog/CustomDialog';\nimport UpdateReservation from './UpdateReservation/UpdateReservation';\nimport { useHistory } from 'react-router-dom';\n\n\nlet lan = 'eng';\n\nfunction ListReservations(): JSX.Element{\n    const classes = useStyles();\n    const history = useHistory();\n    const { updateSnackBarMessage } = useSnackBar();\n\n    const [rows, setRows] = useState<any>([]);\n    const [open, setOpen] = useState<boolean>(false);\n    const [updated, setUpdated] = useState<boolean>(false);\n    const [initValues, setInitValues] = useState( {\n        type: 0,\n        from: 0,\n        to: 0,\n        property: '',\n        pax: 5,\n        flightNo: '',\n        driverNote: '',\n        selectedDate: new Date(),\n        timezone: 0,\n        passengers: []\n        });\n\n    const handleDialogClose = () => {\n        setOpen(false)\n    };\n\n    const handleCacelClick = (cellValues: any) => {\n        const id = cellValues.row._id;\n        deleteReservation(id).then((data) => {\n            if (data.error) {\n                updateSnackBarMessage(data.error.message);\n            } else if (data.success) {\n                updateSnackBarMessage('reservation deleted!');\n                setRows(rows.filter((row: any) => row.id !== cellValues.id));\n            } else {\n                updateSnackBarMessage('An unexpected error occurred. Please try again !');\n            }\n        })\n        \n    };\n    const handleEditClick = (cellValues: any) => {\n        setInitValues(cellValues.row)\n        setOpen(true)\n    }\n\n    const columns = lan === 'tr' ? turksihColumns(handleEditClick, handleCacelClick): engColumn(handleEditClick, handleCacelClick);\n    \n    useEffect(() => {\n        getReservations().then((data) => {\n            if (data.error){\n                console.log(data.error)\n            } else if (data.success) {\n                data.success.reservations.map((reservation, idx) => {\n                    reservation.id = idx + 1;\n                    const date = new Date(reservation.selectedDate)\n                    reservation.date = format(date, \"dd-MM-yyyy kk:mm\")\n                });\n                setRows(data.success.reservations);\n            } else {\n                console.log('External error')\n            }\n        })\n        return () => {\n            setRows([]);\n        }\n    }, [history, open]);\n    \n    return (\n        <Box className={classes.root}>\n            <DataTable rows={rows} columns={columns} />\n            <CustomDialog \n                open={open} \n                onClose={handleDialogClose}\n                // eslint-disable-next-line react/style-prop-object\n                style={'updateReservation'}\n            >\n                <UpdateReservation initValues={initValues} setOpen={setOpen} />\n            </CustomDialog>\n        </Box>\n    )\n}\n\nexport default ListReservations;"]},"metadata":{},"sourceType":"module"}