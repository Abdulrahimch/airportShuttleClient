{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport useStyles from './useStyles';\nimport { format } from 'date-fns';\nimport { engColumn, turksihColumns } from '../../utils/dictionary';\nimport { getReservations } from '../../helpers/APICalls/reservation';\nimport { deleteReservation } from '../../helpers/APICalls/reservation';\nimport { useSnackBar } from '../../context/useSnackbarContext';\nimport { useHistory } from 'react-router-dom';\nimport { useLanguage } from '../../context/useLanguageContext';\nimport { turkishTabs, engTabs } from '../../utils/dictionary';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ListReservations() {\n  _s();\n\n  const {\n    root\n  } = useStyles();\n  const history = useHistory();\n  const {\n    language\n  } = useLanguage();\n  const {\n    updateSnackBarMessage\n  } = useSnackBar();\n  const [rows, setRows] = useState([]);\n  const [open, setOpen] = useState(false);\n  const [value, setValue] = useState('1');\n  const [initValues, setInitValues] = useState({\n    type: 0,\n    from: 0,\n    to: 0,\n    property: '',\n    pax: 5,\n    flightNo: '',\n    driverNote: '',\n    selectedDate: new Date(),\n    timezone: 0,\n    passengers: []\n  });\n\n  const handleDialogClose = () => {\n    setOpen(false);\n  };\n\n  const handleCacelClick = cellValues => {\n    const id = cellValues.row._id;\n    deleteReservation(id).then(data => {\n      if (data.error) {\n        updateSnackBarMessage(data.error.message);\n      } else if (data.success) {\n        updateSnackBarMessage('reservation deleted!');\n        setRows(rows.filter(row => row.id !== cellValues.id));\n      } else {\n        updateSnackBarMessage('An unexpected error occurred. Please try again !');\n      }\n    });\n  };\n\n  const handleEditClick = cellValues => {\n    setInitValues(cellValues.row);\n    setOpen(true);\n  };\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const columns = language === 'tr' ? turksihColumns(handleEditClick, handleCacelClick) : engColumn(handleEditClick, handleCacelClick);\n  const tabs = language === 'tr' ? turkishTabs : engTabs;\n  useEffect(() => {\n    getReservations().then(data => {\n      if (data.error) {\n        console.log(data.error);\n      } else if (data.success) {\n        data.success.reservations.map((reservation, idx) => {\n          reservation.id = idx + 1;\n          const date = new Date(reservation.selectedDate);\n          reservation.date = format(date, \"dd-MM-yyyy kk:mm\");\n        });\n        setRows(data.success.reservations);\n      } else {\n        console.log('External error');\n      }\n    });\n    return () => {\n      setRows([]);\n    };\n  }, [history, open]);\n  return (\n    /*#__PURE__*/\n    // <>\n    // <Box className={root}>\n    //     <DataTable rows={rows} columns={columns} />\n    //     <CustomDialog \n    //         open={open} \n    //         onClose={handleDialogClose}\n    //         // eslint-disable-next-line react/style-prop-object\n    //         style={'updateReservation'}\n    //     >\n    //         <UpdateReservation initValues={initValues} setOpen={setOpen} />\n    //     </CustomDialog>\n    // </Box>\n    // </>\n    _jsxDEV(_Fragment, {}, void 0, false)\n  );\n}\n\n_s(ListReservations, \"zqZ2on2VrstgXk6A3oNq1rcmmHc=\", false, function () {\n  return [useStyles, useHistory, useLanguage, useSnackBar];\n});\n\n_c = ListReservations;\nexport default ListReservations;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListReservations\");","map":{"version":3,"sources":["/home/cisco/airport-shuttle-v2/airportShuttleV2/client/src/pages/ClientReservations/ListReservations.tsx"],"names":["useEffect","useState","useStyles","format","engColumn","turksihColumns","getReservations","deleteReservation","useSnackBar","useHistory","useLanguage","turkishTabs","engTabs","ListReservations","root","history","language","updateSnackBarMessage","rows","setRows","open","setOpen","value","setValue","initValues","setInitValues","type","from","to","property","pax","flightNo","driverNote","selectedDate","Date","timezone","passengers","handleDialogClose","handleCacelClick","cellValues","id","row","_id","then","data","error","message","success","filter","handleEditClick","handleChange","event","newValue","columns","tabs","console","log","reservations","map","reservation","idx","date"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport useStyles from './useStyles';\nimport { format } from 'date-fns';\nimport { Box, Tab } from '@material-ui/core';\nimport DataTable from '../../components/DataTable/DataTable';\nimport { engColumn, turksihColumns } from '../../utils/dictionary';\nimport { getReservations } from '../../helpers/APICalls/reservation';\nimport { deleteReservation } from '../../helpers/APICalls/reservation';\nimport { useSnackBar } from '../../context/useSnackbarContext';\nimport CustomDialog from '../../components/CustomDialog/CustomDialog';\nimport UpdateReservation from './UpdateReservation/UpdateReservation';\nimport { useHistory } from 'react-router-dom';\nimport { useLanguage } from '../../context/useLanguageContext';\nimport TabContext from '@material-ui/lab/TabContext';\nimport TabList from '@material-ui/lab/TabList';\nimport TabPanel from '@material-ui/lab/TabPanel';\nimport { turkishTabs, engTabs } from '../../utils/dictionary';\n\nfunction ListReservations(): JSX.Element{\n    const { root } = useStyles();\n    const history = useHistory();\n    const { language } = useLanguage();\n    const { updateSnackBarMessage } = useSnackBar();\n\n    const [rows, setRows] = useState<any>([]);\n    const [open, setOpen] = useState<boolean>(false);\n    const [value, setValue] = useState('1');\n    const [initValues, setInitValues] = useState( {\n        type: 0,\n        from: 0,\n        to: 0,\n        property: '',\n        pax: 5,\n        flightNo: '',\n        driverNote: '',\n        selectedDate: new Date(),\n        timezone: 0,\n        passengers: []\n        });\n\n    const handleDialogClose = () => {\n        setOpen(false)\n    };\n\n    const handleCacelClick = (cellValues: any) => {\n        const id = cellValues.row._id;\n        deleteReservation(id).then((data) => {\n            if (data.error) {\n                updateSnackBarMessage(data.error.message);\n            } else if (data.success) {\n                updateSnackBarMessage('reservation deleted!');\n                setRows(rows.filter((row: any) => row.id !== cellValues.id));\n            } else {\n                updateSnackBarMessage('An unexpected error occurred. Please try again !');\n            }\n        })\n        \n    };\n    const handleEditClick = (cellValues: any) => {\n        setInitValues(cellValues.row)\n        setOpen(true)\n    };\n\n    const handleChange = (event:  any, newValue: string) => {\n        setValue(newValue);\n    };\n\n    const columns = language === 'tr' ? turksihColumns(handleEditClick, handleCacelClick): engColumn(handleEditClick, handleCacelClick);\n    const tabs = language === 'tr' ? turkishTabs : engTabs\n\n    useEffect(() => {\n        getReservations().then((data) => {\n            if (data.error){\n                console.log(data.error)\n            } else if (data.success) {\n                data.success.reservations.map((reservation, idx) => {\n                    reservation.id = idx + 1;\n                    const date = new Date(reservation.selectedDate)\n                    reservation.date = format(date, \"dd-MM-yyyy kk:mm\")\n                });\n                setRows(data.success.reservations);\n            } else {\n                console.log('External error')\n            }\n        })\n        return () => {\n            setRows([]);\n        }\n    }, [history, open]);\n\n    \n    \n    return (\n        // <>\n        // <Box className={root}>\n        //     <DataTable rows={rows} columns={columns} />\n        //     <CustomDialog \n        //         open={open} \n        //         onClose={handleDialogClose}\n        //         // eslint-disable-next-line react/style-prop-object\n        //         style={'updateReservation'}\n        //     >\n        //         <UpdateReservation initValues={initValues} setOpen={setOpen} />\n        //     </CustomDialog>\n        // </Box>\n        // </>\n        <>\n            {/* <Box sx={{ width: '100%' }} className={root}>\n                <TabContext value={value}>\n                    <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n                        <TabList onChange={handleChange} aria-label=\"lab API tabs example\">\n                            {tabs.map(({label, value}, idx) => (\n                                <Tab key={idx} label={label} value={value} />\n                            ))}\n                        </TabList>\n                    </Box>\n                    <TabPanel value=\"1\" style={{ width: '100%' }}><DataTable rows={rows} columns={columns} /></TabPanel>\n                    <TabPanel value=\"2\" style={{ width: '100%' }}><DataTable rows={rows} columns={columns} /></TabPanel>\n                </TabContext>\n            </Box> */}\n        </>\n    )\n}\n\nexport default ListReservations;"]},"metadata":{},"sourceType":"module"}