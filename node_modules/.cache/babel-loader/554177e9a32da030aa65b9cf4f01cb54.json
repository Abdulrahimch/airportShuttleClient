{"ast":null,"code":"var _jsxFileName = \"/home/cisco/airport-shuttle-v2/airportShuttleV2/client/src/pages/Agency/Drivers/ListDrivers/ListDrivers.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { Box } from \"@material-ui/core\";\nimport CustomDialog from \"../../../../components/CustomDialog/CustomDialog\";\nimport DataTable from \"../../../../components/DataTable/DataTable\";\nimport { useLanguage } from \"../../../../context/useLanguageContext\";\nimport { engDriverColumn, turksihDriverColumns } from \"../../../../utils/dictionary\";\nimport UpdateDriver from \"../UpdateDriver/UpdateDriver\";\nimport { getDrivers } from '../../../../helpers/APICalls/driver';\nimport { useSnackBar } from '../../../../context/useSnackbarContext';\nimport { useHistory } from 'react-router-dom';\nimport { format } from 'date-fns';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ListDrivers = () => {\n  _s();\n\n  // const initRows = [{id: 1, firstName: 'abood', lastName: 'shiha', email: 'abood@gmail.com', carNumber: '656'} ]\n  const [open, setOpen] = useState(false);\n  const [rows, setRows] = useState([]);\n  const [initValues, setInitValues] = useState();\n  const {\n    updateSnackBarMessage\n  } = useSnackBar();\n  const history = useHistory();\n  const {\n    language\n  } = useLanguage();\n  useEffect(() => {\n    getDrivers().then(data => {\n      if (data.error) {\n        updateSnackBarMessage(data.error);\n      } else if (data.success) {\n        data.success.drivers.map((driver, idx) => {\n          driver.id = idx + 1;\n          const date = driver.createdAt ? new Date(driver.createdAt) : new Date();\n          driver.createdAt = format(date, 'dd-MM-yyyy kk:mm');\n        });\n        setRows(data.success.drivers);\n      } else {\n        updateSnackBarMessage('An unexpected error occurred. Please try again !');\n      }\n    });\n    return () => {\n      setRows([]);\n    };\n  }, [history, open === false]);\n\n  const handleEditClick = values => {\n    setInitValues(values.row);\n    setOpen(true);\n  };\n\n  const handleCancelClick = values => {\n    setRows(rows.filter(row => row.id !== values.id));\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const columns = language === 'eng' ? engDriverColumn(handleEditClick, handleCancelClick) : turksihDriverColumns(handleEditClick, handleCancelClick);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      children: [/*#__PURE__*/_jsxDEV(DataTable, {\n        rows: rows,\n        columns: columns\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CustomDialog, {\n        open: open,\n        onClose: handleClose,\n        style: \"updateReservation\",\n        children: /*#__PURE__*/_jsxDEV(UpdateDriver, {\n          initValues: initValues\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(ListDrivers, \"9IMQLGClv4oBgn6+TPH2U6vGhAU=\", false, function () {\n  return [useSnackBar, useHistory, useLanguage];\n});\n\n_c = ListDrivers;\nexport default ListDrivers;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListDrivers\");","map":{"version":3,"sources":["/home/cisco/airport-shuttle-v2/airportShuttleV2/client/src/pages/Agency/Drivers/ListDrivers/ListDrivers.tsx"],"names":["useEffect","useState","Box","CustomDialog","DataTable","useLanguage","engDriverColumn","turksihDriverColumns","UpdateDriver","getDrivers","useSnackBar","useHistory","format","ListDrivers","open","setOpen","rows","setRows","initValues","setInitValues","updateSnackBarMessage","history","language","then","data","error","success","drivers","map","driver","idx","id","date","createdAt","Date","handleEditClick","values","row","handleCancelClick","filter","handleClose","columns"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react'; \nimport { Box } from \"@material-ui/core\";\nimport CustomDialog from \"../../../../components/CustomDialog/CustomDialog\";\nimport DataTable from \"../../../../components/DataTable/DataTable\";\nimport { useLanguage } from \"../../../../context/useLanguageContext\";\nimport { engDriverColumn, turksihDriverColumns } from \"../../../../utils/dictionary\";\nimport UpdateDriver from \"../UpdateDriver/UpdateDriver\";\nimport { Driver } from '../../../../interface/Driver';\nimport { getDrivers } from '../../../../helpers/APICalls/driver';\nimport { useSnackBar } from '../../../../context/useSnackbarContext';\nimport { useHistory } from 'react-router-dom';\nimport { format } from 'date-fns';\n\n\nconst ListDrivers = (): JSX.Element => {\n    // const initRows = [{id: 1, firstName: 'abood', lastName: 'shiha', email: 'abood@gmail.com', carNumber: '656'} ]\n\n    const [open, setOpen] = useState<boolean>(false);\n    const [rows, setRows] = useState<Driver []>([]);\n    const [initValues, setInitValues] = useState<any>();\n    const { updateSnackBarMessage } = useSnackBar(); \n    const history = useHistory();\n    const { language } = useLanguage();\n\n    useEffect(() => {\n        getDrivers().then((data) => {\n            if (data.error) {\n                updateSnackBarMessage(data.error)\n            }else if (data.success) {\n                data.success.drivers.map((driver, idx) => {\n                    driver.id = idx + 1;\n                    const date = driver.createdAt ? new Date(driver.createdAt) : new Date();\n                    driver.createdAt = format(date, 'dd-MM-yyyy kk:mm')\n                });\n                setRows(data.success.drivers);\n            } else {\n                updateSnackBarMessage('An unexpected error occurred. Please try again !');\n            }\n        });\n        return () => {\n            setRows([]);\n        };\n    }, [history, open===false])\n\n    const handleEditClick = (values: any) => {\n        setInitValues(values.row)\n        setOpen(true);\n    }\n    const handleCancelClick = (values: any) => {\n        setRows(rows.filter(row => row.id !== values.id));\n    }\n\n    const handleClose = () => {\n        setOpen(false)\n    };\n\n    const columns = language === 'eng' ? engDriverColumn(handleEditClick, handleCancelClick) : turksihDriverColumns(handleEditClick, handleCancelClick)\n    return (\n        <>\n            <Box>\n                <DataTable rows={rows} columns={columns} />\n                <CustomDialog open={open} onClose={handleClose} style=\"updateReservation\" >\n                    <UpdateDriver initValues={initValues}/>\n                </CustomDialog>\n            </Box>\n        </>\n    )\n};\n\nexport default ListDrivers;"]},"metadata":{},"sourceType":"module"}